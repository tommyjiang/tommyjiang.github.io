<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tommy&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tommyjiang.github.io/"/>
  <updated>2021-04-29T04:35:12.261Z</updated>
  <id>http://tommyjiang.github.io/</id>
  
  <author>
    <name>Tommy Jiang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《看透银行》读书笔记</title>
    <link href="http://tommyjiang.github.io/2021/2021-04-24-dive-into-bank/"/>
    <id>http://tommyjiang.github.io/2021/2021-04-24-dive-into-bank/</id>
    <published>2021-04-24T02:00:00.000Z</published>
    <updated>2021-04-29T04:35:12.261Z</updated>
    
    <content type="html"><![CDATA[<div class="alert alert-info"><i class="fa fa-info"></i>入手了冰哥的签名版。</div><a id="more"></a><h1 id="负债业务"><a href="#负债业务" class="headerlink" title="负债业务"></a>负债业务</h1><p>银行的负债主要包括存款、同业借款、同业存单、央行借款。负债业务的评价指标包括：</p><ol><li>负债成本。包括直接成本和间接成本。直接成本是计息负债的综合利率，间接成本是获取负债的运营费用。2017 年典型银行的负债利率在 1.5%-3% 之间，负债间接成本约在 0.3%-0.6% 之间。</li><li>流动性覆盖率。等于合格优质流动性资产 / 未来 30 天现金净流出量。需要银行多配置优质资产和现金净流出。</li></ol><h2 id="存款业务"><a href="#存款业务" class="headerlink" title="存款业务"></a>存款业务</h2><p>存款类型按存期划分包括活期存款、定期存款、通知存款、协议存款、结构化存款等。按客户性质划分包括对公存款、零售存款存款业务的评价指标包括：</p><ol><li>数量，存款绝对数量和相对增速。</li><li>质量，存款直接成本。活期存款占比越高，成本越低，越有优势。招行 AUM 导向的考核体系，可以帮助招行获得存款成本优势。(中国银行存款成本显著高于其他三大航和招商银行？)</li></ol><p>存款相关指标包括：</p><ol><li>货币流动性指标。通常使用 M2(流通中现金 + 企业存款 + 机关团体存款 + 农村存款 + 个人储蓄存款 + 证券客户保证金)，可近似看做银行存款增速和资产规模增速。</li><li>存款准备金率。指金融机构为保证客户提取存款和资金清算需要而准备的资金，是缴存在中央银行的存款。存款准备金占其存款总额的比例即存款准备金率。存款准备金率可以用来调节流动性，该比率越高，流动性越紧。</li><li>存贷比。应成为贷存比，指银行贷款总额与存款总额的比例，从盈利的角度考虑，该指标越高越好，但过高的存贷比可能意味着银行存款增长乏力，只能依靠成本较高的同业拆借和向央行拆借满足负债需求。</li></ol><h2 id="同业负债"><a href="#同业负债" class="headerlink" title="同业负债"></a>同业负债</h2><p>同业负债包括同业和其他金融机构存放、同业拆入和卖出回购。</p><ol><li>同业和其他金融机构存放。同业存放相对较少，是指各银行为方便结算，在相关结算单位开立存款账户，利率参考上海银行间同业拆放利率(Shibor)。其他金融机构存放，不同银行间有很大差别，也会导致不同银行负债成本有很大差别。</li><li>同业拆入。又称同业拆放，是金融机构之间进行短期、临时性头寸调剂的市场，手头资金富余的银行，将资金拆借给缺乏资金的银行。同业拆借市场没有资产抵押，完全建立在信用基础上。</li><li>卖出回购。这部分在同业负债中占比最小，指银行先将一些资产卖给其他银行，并约定好回购时间和价格，类似有抵押借贷。</li></ol><p>同业负债有一定流动性风险，基本上属于短期负债，如果配置过多长期资产，“短借长贷”造成资产期限错配，可能会出现流动性危机。</p><h2 id="同业存单"><a href="#同业存单" class="headerlink" title="同业存单"></a>同业存单</h2><p>同业存单是存款类金融机构在全国银行间市场上发型的记账式定期存款凭证，相当于银行花钱向另一家银行买存款，采用零息债券的形式，即买入同业存单的机构付出的金额是票面金额减去到期时的利息。</p><p>同业存单的利率实际上形成了银行间中长期资金拆借的利率，流动性紧张的时候，同业存单利率走高。存款基础好的银行，愿意作为同业存单的买入行。虽然通过同业存单拿到负债不需要像吸储一样付出附加成本，可以快速扩张负债规模，但同业存单是所有负债中对流动性最敏感的，同时成本较高，是一把双刃剑。</p><h2 id="央行借款"><a href="#央行借款" class="headerlink" title="央行借款"></a>央行借款</h2><p>主要包括再贷款、再贴现和结构性货币政策工具。再贴现即通过票据债权转让，从央行进行再贷款。结构性货币政策工具包括：</p><ol><li>SLF，常备借贷便利，俗称“酸辣粉”。SLF 是银行利用高信用评级债券等优质资产向央行一对一申请抵押贷款。</li><li>MLF，中期借贷便利，俗称“麻辣粉”。MLF 与 SLF 类似，主要功能是投放中期基础货币，实现对特定领域的定向支持。</li><li>TMLF，定向中期借贷便利，俗称“特麻辣粉”。TMLF 经续作可使用 3 年，利率比 MLF 利率优惠 15 个基点。</li></ol><h1 id="资产业务"><a href="#资产业务" class="headerlink" title="资产业务"></a>资产业务</h1><p>银行的资产业务是真正帮助银行赚钱的业务线，配置资产需要兼顾收益率和风险，不能只配置高收益率的资产。同时也需要考虑资产的久期，不能全部配置长久期资产，否则就会面临流动性风险和期限错配引发的利率风险。</p><p>银行资产主要包括贷款、投资、存放央行、存放同业或其他金融机构、拆出资金及买入返售资产、现金、贵金属、商誉、其他资产等，其中前面五项产生利息收入，是生息资产，后面四项是非生息资产。</p><h2 id="贷款业务"><a href="#贷款业务" class="headerlink" title="贷款业务"></a>贷款业务</h2><p>贷款业务分为零售贷款、对公贷款和票据贴现三大类。</p><ol><li>零售贷款。即发放给个人或个体经营者的贷款，优势是风险相对较低(社会信用体系完善、没有个人破产保护制度)，收益率相对较高(客户议息能力弱)，劣势是需要强大的客户基础和较高的尽调成本。</li><li>对公贷款。即发放给企事业单位的贷款，优势是单笔金额大尽调成本低，可以派生存款变相扩张资产负债规模，劣势是不良率比零售贷款高、收益率比零售贷款低。</li><li>票据贴现。即资金借贷者将未到期的商业票据、银行承兑汇票等向银行要求变为现款，银行收到票据，按票面金额扣除贴现利息后付给借贷者现款。</li></ol><h2 id="投资业务"><a href="#投资业务" class="headerlink" title="投资业务"></a>投资业务</h2><p>投资资产包括债券、非标资产、基金、贵金属、股权投资等。</p><ol><li>债券。政府债券比例最高，政策性银行债券次之，企业债最少。</li><li>非标资产。非标业务可以规避贷款监管指标限制，同时也可以减少资本金消耗和资产减值损失计提。目前非标资产受到的监管越来越严格，未来这部分资产会显著收缩。</li></ol><p>投资时，对投资资产占比过高的银行，要更加谨慎。</p><h2 id="信用卡业务"><a href="#信用卡业务" class="headerlink" title="信用卡业务"></a>信用卡业务</h2><p>信用卡刷卡手续费，国内一般按 0.6% 收取，按 7:2:1 比例在发卡行、收单行和银联间进行分配。</p><p>对于没有全额还款的信用卡，发卡行将收取罚息。罚息的特点是利率高(年化 18%)、按月计复息、全额罚息(以全部消费额计息)。对于无法全额还款的持卡人，可以选择分期支付。分期支付对银行有如下好处：</p><ol><li>分期费率的实际利率高。分期费率的计算并不能简单的用利息除以本金，考虑时间加权的分期利率通常在 15%-16% 之间，略低于罚息利率，但相比贷款也高出很多，可以为银行创造收入。</li><li>分期违约时，银行损失小。分期途中即使客户发生违约，银行之前也已经收到一部分本金，不会全部损失。</li><li>美化财报。目前只有招商银行和光大银行将分期手续费计入利息收入，其他银行均算作非息收入，多数投资者默认非息收入越高越好，相当于美化了财报。</li></ol><h1 id="中间业务"><a href="#中间业务" class="headerlink" title="中间业务"></a>中间业务</h1><p>银行的中间业务是指不构成商业银行表内资产、表内负债，形成银行非利息收入的业务。中间业务具体可以分为金融服务业务和表外业务。中间业务的最大特征是没有风险或风险资产很少，费率不高，消耗人力资源大，但由于几乎不消耗资本金，依然是商业银行未来发展的重要方向。同时，中间业务也可以增强用户的黏性。</p><ol><li>金融服务业务。金融服务业务不形成或有资产和或有负债，或有的意思是因过去的交易或事项，今后可望获得。金融服务业务中，商业银行以代理人身份为客户办理业务，并从中收取手续费，完全不承担任何风险，也不会产生任何减值需求。具体包括清算结算业务、银行卡业务、代理业务、托管业务、咨询顾问业务等。</li><li>表外业务。表外业务与银行的资产和负债业务关系紧密，未来很可能由于某些条件触发转换为资产业务和负债业务，主要包括担保业务、承诺业务和金融衍生业务。</li></ol><h2 id="资产管理业务"><a href="#资产管理业务" class="headerlink" title="资产管理业务"></a>资产管理业务</h2><p>资产管理业务，简称资管业务，是指证券、期货、基金等金融机构作为资产管理人，根据合同约定，为客户提供投资管理服务，并从中收取一定的管理费甚至提成。银行资管业务是为了应对创新性理财产品对客户资产的冲击，目前银行理财占国内资管市场近 30%。</p><ol><li>理财业务。在银行购买理财产品，银行把募集的资金按合同约定投入某类资产，收取一定的管理费。理财业务可以增加用户黏性，也可以提升银行的盈利能力。理财业务是资管业务中最多的。</li><li>委托投资业务。委托行以委托理财服务的名义吸收个人客户资金，以同业存款的方式投给受托行，规定受托行必须将这笔资金投向指定的投资对象。与通道业务一样，都是为了绕开监管，有一定的风险。</li><li>通道业务。银行找第三方金融公司，由第三方将贷款放给客户，然后将收益权包装成理财产品卖给个人客户，银行只收取管理费或手续费，不承担额外的风险，也没有额外的收益。</li></ol><p>2018 年资管新规对银行业务的影响：</p><ol><li>公募理财可以配置非标产品，但必须是国家支持的重点工程或者小微信贷，严谨六入房地产和地方债务平台。</li><li>过渡期内货币型和封闭 6 个月以上的定期开放产品，可以使用摊余成本法，降低理财产品净值的波动，稳定投资者心理。</li><li>拓宽公募理财产品投资范围，起售点从 5 万元降低至 1 万元。</li><li>对非标资产回表补充资本工具支持。</li></ol><h2 id="代理业务"><a href="#代理业务" class="headerlink" title="代理业务"></a>代理业务</h2><p>代理业务是代理人接受客户委托，以被代理人的名义代为办理指定经济业务。代理业务与信托业务非常相似，最本质的差别是代理业务财产归属不发生转移，信托业务财产权转移给受托人，由于不涉及财产转移，银行承担的风险和连带责任更小。</p><p>代理业务包括代收代付业务、代理证券业务、代理保险业务和其他代理业务。代理证券和代理保险业务都可以收取手续费，代理证券业务的手续费在 1% 左右，代理保险的手续费在 3%-6%。</p><h1 id="银行的收入"><a href="#银行的收入" class="headerlink" title="银行的收入"></a>银行的收入</h1><p>银行的收入主要包括净利息收入和非息收入两部分。</p><h2 id="净利息收入"><a href="#净利息收入" class="headerlink" title="净利息收入"></a>净利息收入</h2><p>净利息收入是银行利息收入减去利息支出后的差额。银行的利息收入来源包括：信贷资产、投资资产、同业资产和存放央行款项。目前法定存款准备金利率为 1.62%，超额存款准备金利率为 0.72%，所以存款准备金基本是赔钱的买卖。银行的利息支出来源包括：存款负债、同业负债和央行拆借。</p><p>净利息收入指标包括：</p><ol><li>净息差。即净资产收益率，等于净利息收入，除以总生息资产。</li><li>净利息收入增速。等于(生息资产增速 + 1)，乘以(净息差增速 + 1)，再减 1。</li></ol><h3 id="净息差"><a href="#净息差" class="headerlink" title="净息差"></a>净息差</h3><p>净息差是评价一家银行的重要指标。触及投资者可以通过净息差评估银行的盈利能力，高级投资者需要分析高净息差的风险，顶级投资者需要对净息差趋势进行预测。</p><p>影响净息差的因素主要包括贷款利率、存款成本、同业负债成本、负债和资产配置占比。</p><p>加减息对银行的净息差有显著影响。</p><ol><li>对称加减息。对应档期加减息程度相同的，叫做对称加减息。但不同久期的幅度不同，活期经常不加息。加息时，银行的净息差会扩张，活期存款占比越高的银行，扩大越多。</li><li>非对称加减息。非对称加息情况下，银行净息差扩张会受到限制，如果活期加息，会严重影响净利息收入增加力度，甚至出现净利息收入减少。</li></ol><h3 id="利率市场化"><a href="#利率市场化" class="headerlink" title="利率市场化"></a>利率市场化</h3><p>利率市场化的目的是放开存贷款利率浮动限制，最终取消存贷款基准利率。2019 年 8 月 16 日，中国人民银行宣布了最新的 “LPR 定价机制”，贷款基础利率是商业银行对其最优质客户执行的贷款利率，其他贷款利率在此基础上加减点生成。LPR 将会以 MLF 加点的方式定价，相当于贷款利率与 MLF 利率相关，后续存贷款利率可能自动向 MLF 并轨。</p><h2 id="非利息收入"><a href="#非利息收入" class="headerlink" title="非利息收入"></a>非利息收入</h2><p>非利息收入主要包括手续费和佣金收入，以及其他非利息收入。非利息收入占比越高，收入中和风险相关的利息收入占比越低，银行会将一些模棱两可的业务收入计入手续费收入，以美化财报。一个典型的做法是将信用卡分期收入放入手续费收入，只有招行将其放入利息收入。</p><h1 id="银行的费用"><a href="#银行的费用" class="headerlink" title="银行的费用"></a>银行的费用</h1><ol><li>信用减值损失。信用减值损失是银行应对未来风险的一种方法，也是调节利润波动的一种有效手段。银行的生意特点是利润前置，风险后置，在贷款发放到全额收回本息之间，都可能发生无法偿付的风险。根据贷款资产 5 级分类标准，对不同等级的贷款，银行会计提减值准备金。</li><li>业务及管理费。业务及管理费作为支出，通常投资者会认为越低越好，但过低的业务及管理费可能意味着银行发展和转型动力不足。</li></ol><h1 id="银行业的特质"><a href="#银行业的特质" class="headerlink" title="银行业的特质"></a>银行业的特质</h1><h2 id="高杠杆"><a href="#高杠杆" class="headerlink" title="高杠杆"></a>高杠杆</h2><p>高杠杆的意思是，银行的总资产远远大于其净资产，即银行的负债体量巨大。如果银行 1% 的总资产成为坏账，就会给银行带来净资产 10% 以上的损失，因此资产质量对于盈利至关重要。压制银行杠杆倍数的关键手段是提高资本充足率。</p><h3 id="资本充足率"><a href="#资本充足率" class="headerlink" title="资本充足率"></a>资本充足率</h3><p>资本充足率，公式为资本/风险加权资产，是资本总额对齐风险加权资产的比率，反映了银行以自有资本承担损失的能力，具体包括核心一级资本充足率，一级资本充足率和资本充足率。</p><ol><li>核心一级资本。可以永久使用和支配的自有资金，包括实收资本(主要是普通股权)、资本公积、盈余公积、未分配利润等。</li><li>其他一级资本。主要包括优先股、永续债。</li><li>附属资本。包括未披露准备金、一般损失准备金、从属有期债务、混合资本工具和次级长期债券。</li></ol><p>风险加权资产的计算，包括权重法和高级法两种。权重法是将全部资产按照监管规定类别进行分类，采用监管规定的风险权重，计量信用风险加权资产。而高级法是银行用自己内部的评估系统，对风险资产的主体进行评级，并根据评级结果设定风险资产的风险系数。简单来看，权重法的风险系数是统一规定的，高级法的风险系数是银行内部评估的。</p><p>我国制定了中国版的巴塞尔协议，对银行的资本充足率和杠杆率提出了具体要求。为了满足要求，有以下几种办法：</p><ol><li>减少分红，提高资本。</li><li>降低利息收入，增加非息收入。</li><li>提高净息差，降低风险。增加利息收入，降低风险减值损失。</li><li>增加低风险权重的资产配置。</li></ol><h2 id="高风险"><a href="#高风险" class="headerlink" title="高风险"></a>高风险</h2><ol><li>信用风险。即借款者违约的风险。</li><li>市场风险。指由利率、汇率、股票等价格变化导致银行损失的风险。</li><li>操作风险。指由银行不完善的内部程序、员工、信息系统即外部事件造成损失的风险。</li><li>合规风险。指由于银行没有遵循法律、规则而可能受到法律制裁、监管处罚、重大财务损失和声誉损失的风险。</li><li>流动性风险。指因无法应对因负债下降或资产增加导致流动性困难的风险。流动性风险通常由资产大规模违约或者期限严重错配导致，需要控制信用风险，合理安排期限错配。</li></ol><h3 id="信用风险"><a href="#信用风险" class="headerlink" title="信用风险"></a>信用风险</h3><p>信用风险评估通常用贷款分类体系，包括正常、关注、次级、可疑、损失五类，其中后三类成为不良贷款。评估银行信用风险的指标主要包括：</p><ol><li>不良贷款率。等于不良贷款余额/贷款总额。</li><li>新生成不良率。等于新生成不良贷款/贷款总额。</li><li>逾期 90 天以上贷款占比。等于逾期 90 天以上贷款余额/贷款总额。</li><li>不良偏离度。等于逾期 90 天以上贷款余额/不良贷款余额，这个指标可以看出银行的不良认定是否严格。</li><li>贷款迁徙率。等于期初正常类贷款向下迁徙金额/（期初正常贷款月-期初正常贷款减少金额），这个指标可以反映有多少贷款从正常类转移到其他四类。</li></ol><p>为应对信用风险，银行需根据贷款类型计提一般准备贷款减值。银行信用风险抵补机制的评价指标包括：</p><ol><li>不良贷款拨备覆盖率。简称不良覆盖率，计算方法为贷款减值准备余额/不良贷款余额 * 100%。</li><li>拨贷比。等于拨备余额/贷款总额。</li><li>风险加权资产减值准备率。根据不同资产的风险系数，计算风险加权资产，优势是可以覆盖资产负债表中的所有资产，同时考虑不同资产的风险系数。</li></ol><h2 id="周期性"><a href="#周期性" class="headerlink" title="周期性"></a>周期性</h2><p>银行是顺周期行业，但不是强周期行业。</p><h3 id="内因"><a href="#内因" class="headerlink" title="内因"></a>内因</h3><ol><li>银行的信贷投放具有顺周期倾向。经济景气时，企业愿意承受风险，通过信贷进行投资。</li><li>银行的信用风险具有顺周期倾向。经济景气时，企业信贷质量高，信用减值损失下降。</li><li>银行的抵押品价格具有顺周期倾向。经济景气时，抵押品价值更高。</li></ol><h3 id="外因"><a href="#外因" class="headerlink" title="外因"></a>外因</h3><ol><li>监管要求。巴塞尔协议中要求银行资本充足率高于下限，经济景气时，银行资本积累更快，信贷投放能力更强。</li><li>新版会计准则影响。引入公允价值评估资产价值，经济景气时，资产价格出现泡沫，银行利润更多。</li></ol><h3 id="应对办法"><a href="#应对办法" class="headerlink" title="应对办法"></a>应对办法</h3><ol><li>风险抵补机制。银行每年从营收中提取一定比例的风险减值准备金，积累逆周期资本。</li><li>逆周期调节。经济过热时，收紧银行信贷。</li></ol><h1 id="银行面临的挑战和应对"><a href="#银行面临的挑战和应对" class="headerlink" title="银行面临的挑战和应对"></a>银行面临的挑战和应对</h1><h2 id="挑战"><a href="#挑战" class="headerlink" title="挑战"></a>挑战</h2><ol><li>宏观领域。宏观经济增速减缓，资产质量下降。直接融资比例增加，企业债券由核准制改为注册制，龙头企业申报短期债进行直接融资。</li><li>行业内。资本充足率要求导致杠杆倍数降低，利率市场化影响期限错配净息差，金融业全面开放迎接国际资本挑战。</li><li>行业外。互联网支付企业的兴起。</li></ol><h2 id="应对"><a href="#应对" class="headerlink" title="应对"></a>应对</h2><ol><li>发展高收益低风险的零售业务，提高净息差，降低不良率。</li><li>从单纯的资金出借方，向提供全方位综合金融服务转变。</li><li>提供满足客户资产增值需求，且不消耗资本金的资管业务。</li></ol><h1 id="银行的评估指标"><a href="#银行的评估指标" class="headerlink" title="银行的评估指标"></a>银行的评估指标</h1><ol><li>净息差。净息差反映了利息收入的盈利水平，但净息差高可能由于高风险资产的收益率高导致。</li><li>非息收入占比。非息收入和风险资产无关，但可能会计入公允价值计量资产变动值，建议多关注手续费收入占比。</li><li>不良率、不良偏离度。反映了银行的资产质量。</li><li>核心一级资本充足率。银行增长动力的底线。</li><li>风险加权资产收益率。反映银行如何利用最少的风险资产赚钱最多的利润。</li></ol><h1 id="银行的财报"><a href="#银行的财报" class="headerlink" title="银行的财报"></a>银行的财报</h1><h2 id="资产负债表"><a href="#资产负债表" class="headerlink" title="资产负债表"></a>资产负债表</h2><p>关注总资产余额增速和资产分布。</p><ol><li>资产端。总资产增速既不能太低也不能太高，太高会影响资本充足率。关注贷款占比和金融占比，包括贷款的行业分布、五级分类、贷款余额和不良率。</li><li>负债端。负债总量和负债分布，特别是同业负债的占比。关注存款中活期存款的占比。</li></ol><h2 id="利润表"><a href="#利润表" class="headerlink" title="利润表"></a>利润表</h2><ol><li>总营收和同比增速。</li><li>净利息收入。</li><li>非息收入中的手续费收入。</li><li>信用减值损失和不良贷款减值损失。</li></ol><h2 id="现金流量表"><a href="#现金流量表" class="headerlink" title="现金流量表"></a>现金流量表</h2><p>无需过渡关注经营现金流，需要综合一个相对长的周期，全面统计经营现金流、投资现金流和筹资现金流。</p><h1 id="银行相关的几个问题"><a href="#银行相关的几个问题" class="headerlink" title="银行相关的几个问题"></a>银行相关的几个问题</h1><ol><li>低利率。低利率市场的共同特点是经济体名义 GDP 增速较低，过去三十年由于中国的利率管制，贷款利率相对名义 GDP 增速严重偏低，存款利率更低，以保护银行的利差，所有储户都为国家的经济发展做了贡献。20-30 年后中国会进入低利率时代，股票市场会有一次持续时间很长的慢牛长牛过程。</li><li>不良率高导致破产。银行为应对不良资产，会提前提取风险减值准备金，目前我国对于减值准备的要求是拨贷比 2.5%，部分优秀的银行已经突破 4%。依靠历年计提的减值准备，不可能出现亏损。</li><li>低估值。巴塞尔协议大幅提高对银行资本金的要求，银行的发展受限。</li></ol><h1 id="招行的护城河"><a href="#招行的护城河" class="headerlink" title="招行的护城河"></a>招行的护城河</h1><ol><li>净息差高。招行在资产端配置了较多高收益零售贷款，如信用卡贷款和小微贷款，同时零售业务的活期存款比例高，存款成本较低。</li><li>风控能力出色。贷款不良率低，贷款迁徙率低，风险抵补能力强，拨贷比和资本充足率高。主要得益于比例较大的低风险、高收益零售贷款。</li><li>客户群优质。金葵花和私人银行客户占比少，但 AUM 很高，对公客户黏性不断增强。</li><li>前瞻的战略布局。推出一卡通、信用卡、私人银行。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;alert alert-info&quot;&gt;&lt;i class=&quot;fa fa-info&quot;&gt;&lt;/i&gt;
入手了冰哥的签名版。
&lt;/div&gt;
    
    </summary>
    
      <category term="生活" scheme="http://tommyjiang.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="投资" scheme="http://tommyjiang.github.io/tags/%E6%8A%95%E8%B5%84/"/>
    
  </entry>
  
  <entry>
    <title>《巴芒演义》读书笔记</title>
    <link href="http://tommyjiang.github.io/2021/2021-04-21-warrent-buffett-charlie-munger/"/>
    <id>http://tommyjiang.github.io/2021/2021-04-21-warrent-buffett-charlie-munger/</id>
    <published>2021-04-21T04:00:00.000Z</published>
    <updated>2021-04-27T06:17:17.215Z</updated>
    
    <content type="html"><![CDATA[<div class="alert alert-info"><i class="fa fa-info"></i>老唐的书</div><a id="more"></a><h1 id="投资名人"><a href="#投资名人" class="headerlink" title="投资名人"></a>投资名人</h1><h2 id="利弗莫尔"><a href="#利弗莫尔" class="headerlink" title="利弗莫尔"></a>利弗莫尔</h2><p>股票大作手，1934 年最后一次破产，1940 年饮弹自杀。</p><h2 id="格雷厄姆"><a href="#格雷厄姆" class="headerlink" title="格雷厄姆"></a>格雷厄姆</h2><ul><li>烟蒂股投资，永远只买股价低于净有形资产三分之二的公司的股票。</li><li>市场先生寓言，利用市场先生的报价，但不要受他的影响</li></ul><h2 id="巴菲特"><a href="#巴菲特" class="headerlink" title="巴菲特"></a>巴菲特</h2><ul><li>以合理的价格买入好企业，比用低廉的价格买入普通企业好得多。</li><li>远离杠杆，不要做空。你只能小额下注，不能把全部身家都投进去。</li></ul><h2 id="沃尔特·施洛斯"><a href="#沃尔特·施洛斯" class="headerlink" title="沃尔特·施洛斯"></a>沃尔特·施洛斯</h2><ul><li>坚持烟蒂股投资，1955 - 2002 年，年化收益率 20.1%，扣费后年化收益率 15.3%。不会以两倍净资产的价格买入任何股票。</li><li>对自己性格优劣势的清醒认识，其实也是能力圈，自我认知、自我约束</li><li>1985 年抱怨巴菲特：沃伦整天巴拉巴拉，搞得谁都知道价值投资，现在寻找投资目标是越来越难了</li><li>股债比：愿意持有股票，年轻人应该多关注股票，债券是属于老年人的</li><li>上涨时分批卖出，坦然接受股价卖出后无情飙升的事实</li></ul><h2 id="爱德华·索普"><a href="#爱德华·索普" class="headerlink" title="爱德华·索普"></a>爱德华·索普</h2><ul><li>分散风险、量化风险、赔率有利时要敢于加大赌注(凯利公式)</li></ul><h2 id="迈克尔·米尔肯"><a href="#迈克尔·米尔肯" class="headerlink" title="迈克尔·米尔肯"></a>迈克尔·米尔肯</h2><p>垃圾债券之王，但收益率并没有高于其他产品</p><h2 id="查理·芒格"><a href="#查理·芒格" class="headerlink" title="查理·芒格"></a>查理·芒格</h2><ul><li>律师出身，擅长商业法，律师事务所拥有大量专业律师人才</li><li>有些行业天然就容易赚到钱</li></ul><h2 id="菲利普·费雪"><a href="#菲利普·费雪" class="headerlink" title="菲利普·费雪"></a>菲利普·费雪</h2><ul><li>成长股选择标准</li></ul><h1 id="巴菲特、芒格与可口可乐"><a href="#巴菲特、芒格与可口可乐" class="headerlink" title="巴菲特、芒格与可口可乐"></a>巴菲特、芒格与可口可乐</h1><ul><li>1985 年，可口可乐董事长和总裁投入几千万美元研制新可乐，遭到市场强烈反对，使巴菲特确认可口可乐公司的竞争力。</li><li>1999 年，巴菲特忘记自己之前说的相信道格的话，一起逼迫 52 岁的可口可乐 CEO 道格退休。</li><li>1996 年，芒格预计可口可乐每年 8% 的涨幅，但到 2019 年，年增长率仅 2.8%。说明即使对简单企业做出准确预测，依然相当困难。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;alert alert-info&quot;&gt;&lt;i class=&quot;fa fa-info&quot;&gt;&lt;/i&gt;
老唐的书
&lt;/div&gt;
    
    </summary>
    
      <category term="理财" scheme="http://tommyjiang.github.io/categories/%E7%90%86%E8%B4%A2/"/>
    
    
      <category term="价值投资" scheme="http://tommyjiang.github.io/tags/%E4%BB%B7%E5%80%BC%E6%8A%95%E8%B5%84/"/>
    
  </entry>
  
  <entry>
    <title>《巴菲特传》读书笔记</title>
    <link href="http://tommyjiang.github.io/2021/2021-03-14-buffett/"/>
    <id>http://tommyjiang.github.io/2021/2021-03-14-buffett/</id>
    <published>2021-03-14T02:00:00.000Z</published>
    <updated>2021-04-27T06:17:17.216Z</updated>
    
    <content type="html"><![CDATA[<div class="alert alert-info"><i class="fa fa-info"></i>向价值投资最伟大的践行者学习。</div><a id="more"></a><h1 id="巴菲特对格雷厄姆投资思想的发展"><a href="#巴菲特对格雷厄姆投资思想的发展" class="headerlink" title="巴菲特对格雷厄姆投资思想的发展"></a>巴菲特对格雷厄姆投资思想的发展</h1><p>格雷厄姆的投资思想，可以参考《聪明的投资者》一书。</p><ul><li>会考虑没有在资产负债表上体现的价值，例如品牌特许权，例如美国运通和迪士尼。</li><li>对于投资专家，应该考虑集中投资而非分散投资。</li></ul><h1 id="巴菲特的成功和失败经历"><a href="#巴菲特的成功和失败经历" class="headerlink" title="巴菲特的成功和失败经历"></a>巴菲特的成功和失败经历</h1><p>幼时的商业经历：</p><ul><li>摆摊卖口香糖、柠檬汁，统计自动售货机饮料瓶盖数</li><li>高尔夫球场当球童，捡打飞的高尔夫球让同伴卖，自己拿提成</li><li>送报员，自己设计送报路线，免费送女服务生报纸，获取搬家消息</li><li>理发店摆弹子球机和店铺分成，伪装成小伙计，上大学之前卖给一个退伍军人</li><li>拿出 1200 美元积蓄，买下内布拉斯加的 40 英亩农场</li></ul><h1 id="巴菲特的特点"><a href="#巴菲特的特点" class="headerlink" title="巴菲特的特点"></a>巴菲特的特点</h1><ul><li>对数字着迷。</li><li>对钱有浓厚兴趣，想尽办法赚钱，很清楚自己想要什么。总有一天我会变得很富有，成为报纸上的焦点人物。只是觉得赚钱的同时看着财富慢慢积累，是件很有意思的事情。不会，我要住在奥马哈。17 岁进入沃顿商学院，大部分时间泡在费城一家经纪公司办公室，跟踪各种股票行情，注意力几乎放在校外。提醒好友及时结清欠款</li><li>不断储备知识，用理性的方式把知识转化为创造财富的能力。</li><li>跟随大师学习。哥伦比亚商学院，跟随格雷厄姆。毕业后，不愿意为不认识的人工作。</li><li>做事时心无旁骛，思维缜密严谨。</li><li>理性，性格温和。</li></ul><h1 id="其他人的失败"><a href="#其他人的失败" class="headerlink" title="其他人的失败"></a>其他人的失败</h1><ul><li>巴菲特毕业时，格雷厄姆建议他找个安稳工作，推迟到第二次大萧条之后再进入股市</li><li>巴菲特毕业之后选择当经纪人，但他的利益与投资人利益并不一致。后来采用超额业绩提成的方法开办投资公司。</li><li>投机基金：我们不会爱上任何东西，每天早晨起来，每样东西都是要出售的，包括证券组合里的每一只股票，乃至我的西服和领带。</li></ul><h1 id="名句摘录"><a href="#名句摘录" class="headerlink" title="名句摘录"></a>名句摘录</h1><h2 id="投资和投机"><a href="#投资和投机" class="headerlink" title="投资和投机"></a>投资和投机</h2><ul><li>故意以高于内在价值的价格购买股票，同时期待能够很快以更高价值卖出的行为，这种行为应该被做投机。(Consciously paying more for a stock than its calculated value-in the hope that it can soon be sold for a still-higher price-should be labeled speculation.)</li></ul><h2 id="选股"><a href="#选股" class="headerlink" title="选股"></a>选股</h2><h2 id="耐心持股"><a href="#耐心持股" class="headerlink" title="耐心持股"></a>耐心持股</h2><ul><li>我不会只为一个诱人的价格，就把由我喜欢和敬佩的人经营的好公司卖掉。(I certainly have no desire to sell a good controlled business run by people I like and admire, merely to obtain a fancy price.)</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>行动，立即行动！无论你有什么梦想，千万不要等待。</li><li>股海沉浮中，投资者必须要有耐心和定力。</li><li>选一只股票靠的不是别人信口开河的评价，而是事实。</li><li>永远不要指望转让时能卖个好价钱，而是要让自己的买入价低得诱人。</li><li>一个好的经理人在一个糟糕的行业也等于是巧妇难为无米之炊。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;alert alert-info&quot;&gt;&lt;i class=&quot;fa fa-info&quot;&gt;&lt;/i&gt;
向价值投资最伟大的践行者学习。
&lt;/div&gt;
    
    </summary>
    
      <category term="理财" scheme="http://tommyjiang.github.io/categories/%E7%90%86%E8%B4%A2/"/>
    
    
      <category term="价值投资" scheme="http://tommyjiang.github.io/tags/%E4%BB%B7%E5%80%BC%E6%8A%95%E8%B5%84/"/>
    
  </entry>
  
  <entry>
    <title>ETF 汇总</title>
    <link href="http://tommyjiang.github.io/2021/2021-02-15-etf/"/>
    <id>http://tommyjiang.github.io/2021/2021-02-15-etf/</id>
    <published>2021-02-15T08:00:00.000Z</published>
    <updated>2021-04-27T06:17:17.215Z</updated>
    
    <content type="html"><![CDATA[<div class="alert alert-info"><i class="fa fa-info"></i>ETF 相关资料整理</div><a id="more"></a><p>新手远离杠杆类 ETF。</p><h1 id="美股-ETF"><a href="#美股-ETF" class="headerlink" title="美股 ETF"></a>美股 ETF</h1><ul><li>标普 500 指数<ul><li>标普 500 ETF-SPDR(ARCA:SPY)，年管理费 0.09%。</li><li>标普 500 ETF-iShares(ARCA:IVV)，年管理费 0.04%。</li><li>标普 500 ETF-Vanguard(ARCA:VOO)，年管理费 0.05%。</li><li>标普 500 等权指数 ETF-Guggenheim(ARCA:RSP)。</li></ul></li><li>小盘指数<ul><li>罗素 2000 指数 ETF-iShares(ARCA:IWM)，追踪罗素 2000 指数。</li><li>标普小盘股 ETF-iShares(ARCA:IJR)，追踪标普 600 小盘股指数。</li><li>美国小盘股 ETF-Vanguard(ARCA:VB)，追踪 CRSP 美国小盘股指数。</li></ul></li><li>板块 ETF<ul><li>科技板块：纳指 100 ETF-Invesco(NASDAQ:QQQ)，追踪纳斯达克市值最大的 100 家公司纳斯达克 100 指数。</li><li>消费板块：日常消费品 ETF-SPDR(ARCA:XLP)和可选消费 ETF-SPDR(ARCA:XLY)。</li><li>生物板块：生物科技指数 ETF-iShares Nasdaq(NASDAQ:IBB)，追踪纳斯达克生物 100 指数。</li><li>军工板块：美国航天国防股指数 ETF-iShares Nasdaq(BATS:ITA)。</li><li>房地产板块：美国房地产 ETF-Vanguard(ARCA:VNQ)。</li></ul></li><li>国家/地区 ETF<ul><li>非美发达国家/地区：EAFE 指数 ETF-iShares(ARCA:EFA)。</li><li>新兴市场：新兴市场ETF-Vanguard(ARCA:VWO)。</li></ul></li><li>其他 ETF<ul><li>动量投资：MSCI 美国动量因素 ETF-iShare(BATS:MTUM)。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;alert alert-info&quot;&gt;&lt;i class=&quot;fa fa-info&quot;&gt;&lt;/i&gt;
ETF 相关资料整理
&lt;/div&gt;
    
    </summary>
    
      <category term="生活" scheme="http://tommyjiang.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="投资" scheme="http://tommyjiang.github.io/tags/%E6%8A%95%E8%B5%84/"/>
    
  </entry>
  
  <entry>
    <title>《彼得·林奇的成功投资》读书笔记</title>
    <link href="http://tommyjiang.github.io/2021/2021-02-08-one-up-on-wall-street/"/>
    <id>http://tommyjiang.github.io/2021/2021-02-08-one-up-on-wall-street/</id>
    <published>2021-02-08T11:00:00.000Z</published>
    <updated>2021-04-27T06:17:17.215Z</updated>
    
    <content type="html"><![CDATA[<div class="alert alert-info"><i class="fa fa-info"></i>传奇基金经理彼得·林奇的投资心得。</div><a id="more"></a><h1 id="投资心理"><a href="#投资心理" class="headerlink" title="投资心理"></a>投资心理</h1><ul><li>坚定信念：进入股市必须有坚定的信念，没有坚定信念的人会成为股市的牺牲品。坚持投资信念，最终决定投资者命运的，只有投资者自己。</li><li>合理预期：股票长期平均收益率 9%-10%，直接购买指数基金即可实现，不要抱有过高预期。</li><li>保持重仓：短期不用的钱始终留在股票市场中。</li><li>逢跌买入：选好股票，逢跌买入，而不是逢跌减仓。</li><li>中立客观：投资的窍门不是要学会相信自己内心的感觉，而是要约束自己不去理会内心的感觉。</li></ul><h1 id="投资组合"><a href="#投资组合" class="headerlink" title="投资组合"></a>投资组合</h1><ul><li>自己选股：业绩基准年化 10%，自己选股应取得 12%-15% 的收益率。</li><li>股票不是赌博：一股股票绝非一注彩票，它代表着对一家公司的部分所有权。</li><li>切换股票原则：不要将账面浮盈和浮亏作为切换股票的原则，应该根据公司基本面分析进行切换。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;alert alert-info&quot;&gt;&lt;i class=&quot;fa fa-info&quot;&gt;&lt;/i&gt;
传奇基金经理彼得·林奇的投资心得。
&lt;/div&gt;
    
    </summary>
    
      <category term="读书" scheme="http://tommyjiang.github.io/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="投资" scheme="http://tommyjiang.github.io/tags/%E6%8A%95%E8%B5%84/"/>
    
  </entry>
  
  <entry>
    <title>《激荡十年·水大鱼大》读书笔记</title>
    <link href="http://tommyjiang.github.io/2021/2021-01-05-ji-dang-shi-nian/"/>
    <id>http://tommyjiang.github.io/2021/2021-01-05-ji-dang-shi-nian/</id>
    <published>2021-01-05T04:00:00.000Z</published>
    <updated>2021-04-27T06:17:17.216Z</updated>
    
    <content type="html"><![CDATA[<div class="alert alert-info"><i class="fa fa-info"></i>完美错过了房地产和互联网发展最好的十年。</div><a id="more"></a><h1 id="房地产"><a href="#房地产" class="headerlink" title="房地产"></a>房地产</h1><h2 id="2007"><a href="#2007" class="headerlink" title="2007"></a>2007</h2><p>房地产开发投资额 2.5 万亿元，增长 30%，深圳房价上涨 51%，北京上涨 45%，津、渝、沪上涨超 15%，下半年中央政府严厉调控，中心城市房产有价无市。</p><h2 id="2008"><a href="#2008" class="headerlink" title="2008"></a>2008</h2><ul><li>1 月，央视访谈<ul><li>万科王石：拐点论，不要抱幻想。</li><li>华远任志强：长远看，持续上涨是趋势，房价涨得还不够快。</li><li>SOHO 潘石屹：不表态。</li></ul></li><li>4 月，万科在杭州降价促销，引起已购房者愤怒。</li><li>9 月，与 2007 年 11 月相比，万科股价跌去 88%，保利地产跌去 75%，碧桂园跌去 87%，中海发展跌去 70%。</li><li>10 月，受经济危机影响，政府决定刺激房地产消费，财政部将首套房契税税率下调至 1%，暂免印花税、土地增值税，央行宣布首次置业和普通改善型置业利率下限为基准利率的 0.7 倍，最低首付款比例调整为 20%。</li></ul><h2 id="2009"><a href="#2009" class="headerlink" title="2009"></a>2009</h2><ul><li>一季度，全国 30 个重点城市中 24 个城市的住宅成交面积环比上升，10 个城市涨幅超过 50%。</li><li>北京连续刷新地王，土地出让金总金额 1.5 万亿元，杭州、上海、北京分列前三。</li><li>11 月，恒大地产上市申请获港交所批准。</li></ul><h2 id="2010"><a href="#2010" class="headerlink" title="2010"></a>2010</h2><ul><li>北京平均房价 22690 元/平方米，上海平均房价 23186 元/平方米，两年涨幅超过一倍。</li></ul><h2 id="2013"><a href="#2013" class="headerlink" title="2013"></a>2013</h2><ul><li>北京市发布限购令，宣布本市户籍成年单身人士限购一套住房，对已拥有一套及以上住房的，暂停向其出售住房。</li></ul><h2 id="2014"><a href="#2014" class="headerlink" title="2014"></a>2014</h2><ul><li>9 月 30 日，央行、银监会发布一则重大通知，提出对拥有1套住房并已结清相应购房贷款的家庭，可享受首套房贷款政策，有机会享受“首付三成、贷款利率七折”的优惠。同时，住建部、财政部又出台配套性新政，提高首套自住住房公积金贷款额度，并允许异地贷款、取消住房公积金个人住房贷款保险等收费项目。</li></ul><h2 id="2016"><a href="#2016" class="headerlink" title="2016"></a>2016</h2><ul><li>购房假离婚，北京市的离婚人数达到97626对，比2014年上涨73%，同时，复婚数比2014年上涨131%。</li></ul><h1 id="互联网"><a href="#互联网" class="headerlink" title="互联网"></a>互联网</h1><h2 id="2008-1"><a href="#2008-1" class="headerlink" title="2008"></a>2008</h2><ul><li>7 月，马云内部邮件提出准备过冬。阿里港股股价从最高点 40 港币跌至 10 港币，港媒调侃阿里巴巴“可怜巴巴”。<blockquote><p>经济将会出现较大的问题，未来几年，经济可能进入非常困难的时期。我的看法是，整个经济形势不容乐观，接下来的冬天会比大家想象的更长！更寒冷！更复杂！我们准备过冬吧。</p></blockquote></li></ul><h2 id="2009-1"><a href="#2009-1" class="headerlink" title="2009"></a>2009</h2><ul><li>中国网民 3.84 亿，超过美国和日本的总和。从新浪、搜狐、网易三巨头门户时代转向 BAT 时代。<ul><li>百度：谷歌在监管上面临挑战，2010 年 1 月退出中国市场。</li><li>腾讯：二季度，腾讯游戏收入超过盛大，成为游戏之王。</li><li>新浪：2009 年 7 月 7 日，王兴饭否网被关停。8 月 14 日，新浪微博内测，8 月 28 日正式公测。</li><li>阿里：2009 年 11 月 11 日，淘宝第一次光棍节大促销。</li></ul></li></ul><h2 id="2010-1"><a href="#2010-1" class="headerlink" title="2010"></a>2010</h2><ul><li>3 月 15 日，QQ 同时在线用户数达到 1 亿。</li><li>3 月，王兴建立美团网。</li><li>9 月底，3Q 大战。</li><li>10 月底，新浪微博注册人数突破 5000 万。</li><li>12 月 10 日，小米发布米聊。</li></ul><h2 id="2011"><a href="#2011" class="headerlink" title="2011"></a>2011</h2><ul><li>1 月 21 日，张小龙团队推出微信。</li><li>8 月，团购公司数达到 5000 多家，上演千团大战。</li><li>10 月，淘宝提高商家服务费，民间成立反淘宝联盟，商务部介入。</li><li>年底，微信用户突破 6000 万。</li></ul><h2 id="2012"><a href="#2012" class="headerlink" title="2012"></a>2012</h2><ul><li>3 月 29 日，微信用户突破 1 亿。</li><li>4 月 19 日，微信推出朋友圈功能。</li><li>8 月 23 日，微信公众号平台上线。</li><li>8 月，字节跳动推出今日头条。</li><li>9 月，程维推出滴滴。</li></ul><h2 id="2014-1"><a href="#2014-1" class="headerlink" title="2014"></a>2014</h2><ul><li>春节，微信推出红包功能。</li><li>5 月，京东上市。</li><li>9 月，阿里上市。</li><li>1-5 月，滴滴快的大战。</li></ul><h2 id="2015"><a href="#2015" class="headerlink" title="2015"></a>2015</h2><ul><li>2 月，滴滴快的合并。</li><li>4 月，58 同城和赶集网合并。</li><li>10 月，美团和大众点评合并，携程去哪儿合并。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;alert alert-info&quot;&gt;&lt;i class=&quot;fa fa-info&quot;&gt;&lt;/i&gt;
完美错过了房地产和互联网发展最好的十年。
&lt;/div&gt;
    
    </summary>
    
      <category term="读书" scheme="http://tommyjiang.github.io/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="经济" scheme="http://tommyjiang.github.io/tags/%E7%BB%8F%E6%B5%8E/"/>
    
      <category term="互联网" scheme="http://tommyjiang.github.io/tags/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
      <category term="房地产" scheme="http://tommyjiang.github.io/tags/%E6%88%BF%E5%9C%B0%E4%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>羊城潮汕避寒游</title>
    <link href="http://tommyjiang.github.io/2020/2020-12-25-canton-trip/"/>
    <id>http://tommyjiang.github.io/2020/2020-12-25-canton-trip/</id>
    <published>2020-12-25T01:30:00.000Z</published>
    <updated>2021-04-27T06:17:17.214Z</updated>
    
    <content type="html"><![CDATA[<div class="alert alert-info"><i class="fa fa-info"></i>冬天到广东避寒。</div><a id="more"></a><h1 id="北京"><a href="#北京" class="headerlink" title="北京"></a>北京</h1><p>凌晨 5 点半从家出发，到首都机场的时候天还黑着。早上首都机场早高峰，支付宝铂金以上会员可以领快速通道，安检不用排队。大兴机场投运后，东航和南航的航班基本都迁过去了，首都机场本来就是国航的大本营，坐摆渡车到远机位的时候看到了好几架国航的 747-8。</p><h1 id="广州"><a href="#广州" class="headerlink" title="广州"></a>广州</h1><p>虽然 2013 年 12 月就来过白云机场，但这次还是第一次坐航班白云机场。白云机场的地址是白云区花东镇机场大道东 888 号，老广见面喜欢说恭喜发财，八就是发，讨个好彩头。</p><h2 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h2><p>炳胜——沙面——北京路煲仔饭——茶理宜世——天字码头珠江夜游</p><h2 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h2><p>人民公园——中山纪念堂——越秀公园——西华路——珠江新城——花城广场——烧鹅——姜撞奶</p><h1 id="汕头"><a href="#汕头" class="headerlink" title="汕头"></a>汕头</h1><p>汕头给我最深的印象就是路上摩托车多，骑得猛，明年要举办亚青会，到处都在修路和修楼。</p><h2 id="第一天-1"><a href="#第一天-1" class="headerlink" title="第一天"></a>第一天</h2><p>点都德早茶——广州东动车——汕头站——杏花吴记牛肉火锅——豆花——一杯潮茶——杏园白粥</p><h2 id="第二天-1"><a href="#第二天-1" class="headerlink" title="第二天"></a>第二天</h2><p>老胡牛肉粿——成川治茶——猪肚鸡——亚强果汁冰——炸鸡翅——十二中鸡柳——虾生鱼生</p><h2 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h2><p>干粿——梅州腌面——汕头站——潮州站</p><h1 id="潮州"><a href="#潮州" class="headerlink" title="潮州"></a>潮州</h1><p>牌坊街——杏仁奶——砂锅粥/腌蟹——广济桥灯光秀——果汁冰</p><p>韩文公祠——牛肉火锅——金信酒店机场大巴——揭阳潮汕机场 SWA swatow——大兴机场——草桥</p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;alert alert-info&quot;&gt;&lt;i class=&quot;fa fa-info&quot;&gt;&lt;/i&gt;
冬天到广东避寒。
&lt;/div&gt;
    
    </summary>
    
      <category term="生活" scheme="http://tommyjiang.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="广州" scheme="http://tommyjiang.github.io/tags/%E5%B9%BF%E5%B7%9E/"/>
    
      <category term="潮汕" scheme="http://tommyjiang.github.io/tags/%E6%BD%AE%E6%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>《价值投资者的教育》读书笔记</title>
    <link href="http://tommyjiang.github.io/2020/2020-12-10-the-education-of-a-value-investor/"/>
    <id>http://tommyjiang.github.io/2020/2020-12-10-the-education-of-a-value-investor/</id>
    <published>2020-12-10T04:00:00.000Z</published>
    <updated>2021-04-27T06:17:17.213Z</updated>
    
    <content type="html"><![CDATA[<div class="alert alert-info"><i class="fa fa-info"></i>2020 年度最佳图书。</div><a id="more"></a><p>先上<a href="https://book.douban.com/subject/26427201/">豆瓣链接</a>。</p><p>一本差点被书名毁了的好书，在流量为王的时代，干点啥都想着博眼球，还是中国青年出版社出的，中国青年要都这样可完了。</p><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><h2 id="第-1-章"><a href="#第-1-章" class="headerlink" title="第 1 章"></a>第 1 章</h2><p>作者在这一章讲了他毕业后的第一份工作——加入了一家华尔街的投行，这家投行就在 J. P. 摩根的隔壁。从世俗的视角来看他或许很成功，但作者自己却认为这是一个非常失败的工作经历。原因是这家投行是一家“声名狼藉”的证券公司。金融公司听起来高大上，很多干的其实就是割韭菜的活儿，比如把一个烂公司包装上市让韭菜接盘。这是一个典型的博傻游戏，比的是谁跑得快，只要不做最后一个接盘的傻子，大家都有钱赚。在这种公司工作，你的任务就是去寻找更多接盘的韭菜，把烂公司包装成好公司卖给他们，从中赚取服务费和交易佣金。这个行业的从业者都有着光鲜亮丽的学历背景，但每个人都默认这样一个潜规则，但作者觉得这样违背了自己的道德，最终在 18 个月后，作者离开了这个投行。</p><ul><li>不要因为一个人的 title 而轻易相信他的话，他的利益可能和你的并不一致，他也可能没有道德底线。</li><li>谨慎选择正确的环境，与正确的人共事和交往，严格来说，应该选择比自己更优秀的人交往。</li><li>不要试图改变环境，要及时止损。</li></ul><h2 id="第-2-章"><a href="#第-2-章" class="headerlink" title="第 2 章"></a>第 2 章</h2><p>这一章作者主要反思了他接受的教育。他高中就读于英国福瑞曼中学，接受的是典型的应试教育，这帮助他进入了牛津布雷奇诺斯学院学习法律。但作者对法律并不感兴趣，甚至做梦烧掉全世界的普通法卷宗。幸运的是，他大三转到了 PPE(政治、哲学和经济) 专业，这样后来他才有机会成为一个投资者。转系之后，他仍然被巴菲特所说的“外部记分卡”驱动，希望得到公众的赞同和认可，最终他也成功了，以全班第一的优异成绩毕业，但他一直被外部所裹挟，内心从来没有接受过自己的选择。</p><ul><li>高学历的人依然会做蠢事，依然会做出不道德的选择。每个人的道德标准不同，你眼中不道德的事儿，别人可能觉得很正常。</li><li>不要活在外人的认可中，要努力让自己接受自己，把衡量自己的方式从“外部记分卡”转变为“内部记分卡”。</li></ul><h2 id="第-3-章"><a href="#第-3-章" class="headerlink" title="第 3 章"></a>第 3 章</h2><p>由于第一份工作的污点，作者在接下来找工作的时候四处碰壁。一个偶然的机会，作者参加了旧金山的一个教人释放内心积极力量的研讨班，从此他开始更多地做不确定但有可能成功的事。他开始尝试镜像模仿巴菲特，想象巴菲特面临相同情况时会怎么做。后来他没有再找新的工作，而是从父亲手中接过一笔钱，建立了自己的基金公司。</p><ul><li>要找到好的导师，然后有意识地模仿，想象他在面对你现在的情况时会怎么做。</li></ul><h2 id="第-4-章"><a href="#第-4-章" class="headerlink" title="第 4 章"></a>第 4 章</h2><p>作者成立的基金选择了标准的对冲基金费率结构，收取 1% 的管理费加上 20% 收益的激励费，而不是像伯克希尔公司那样，没有年度管理费，但收益超过 6% 时收取净收益的 25%。赎回方式上，也没有采取每年只能赎回一次的方案，选择了提前 30 天预约赎回。他管理的基金增长到 5000 万美元，开始受到华尔街的关注。他被周围的阿谀奉承冲昏了头脑，开始推销自己，还好他参加了价值投资俱乐部，回到了正确的道路。作者还做空了一只股票，虽然获得了不错的收益，但他认识到这不是他想要做的事。</p><ul><li>盲从大众永远比标新立异容易。</li><li>赚钱是最重要的，做好自己的事，不要发起不必要的斗争，也不必让自己站在道德制高点充当复仇十字军战士。</li></ul><h2 id="第-5-章"><a href="#第-5-章" class="headerlink" title="第 5 章"></a>第 5 章</h2><p>作者受到西奥迪尼和里根写的书的启发，开始给别人写信表达感激之情。在参加莫尼什公司年会之后，他给莫尼什写了一封信表达感激，莫尼什之后邀请他一起共进晚餐，后来在一次早餐上提出一起和巴菲特共进午餐的想法，这使作者有机会近距离和巴菲特接触。</p><ul><li>我们复制最好的思想，并把它们变成我们自己的思想。</li><li>有些人之所以成功，是因为他们做对了一件大事，但大部分成功是因为他们做对了很多小事。</li></ul><h2 id="第-6-章"><a href="#第-6-章" class="headerlink" title="第 6 章"></a>第 6 章</h2><p>这一章终于轮到标题党提到的午餐了，主要是一些闲聊的细节，比较轻松的一章。</p><ul><li>如果你想要做某件事，最好全身心投入其中。</li><li>小动作积累起来，也能造成很大的差异。</li><li>哪怕你只是个稍微超过一般水平的投资者，只要花的比赚的少，一生时间也足够你非常富有了——只要你有耐心。</li></ul><h2 id="第-7-章-真理-1-坚持自己的原则"><a href="#第-7-章-真理-1-坚持自己的原则" class="headerlink" title="第 7 章 真理 1 坚持自己的原则"></a>第 7 章 真理 1 坚持自己的原则</h2><ul><li>不要选择对冲，例如做空指数或者买入看跌期权，减小波动的同时会降低长期收益率。</li><li>对社会来说，债务是至关重要的经济润滑剂，但对个人投资者来说，债务是灾难性的。</li><li>投资时，性格比智商更重要。</li><li>我们应该怀着感恩的心欢迎逆境，把它当作证明我们勇气、坚毅和韧性的机会。</li></ul><h2 id="第-8-章-真理-2-远离疯狂人群与噪音"><a href="#第-8-章-真理-2-远离疯狂人群与噪音" class="headerlink" title="第 8 章 真理 2 远离疯狂人群与噪音"></a>第 8 章 真理 2 远离疯狂人群与噪音</h2><ul><li>控制大脑中非理性的因素，必须成为投资中必不可少的一部分。</li><li>理想的通勤时间在十到二十分钟之间。</li><li>意志力是有限的，要用在最需要的地方。</li></ul><h2 id="第-9-章-真理-3-永葆童真与好奇心"><a href="#第-9-章-真理-3-永葆童真与好奇心" class="headerlink" title="第 9 章 真理 3 永葆童真与好奇心"></a>第 9 章 真理 3 永葆童真与好奇心</h2><ul><li>如果你的生活出问题了，那你很难良好的工作。</li><li>我们对任何事物都不可能有完全充分的了解，必须进行概率推测。</li><li>保持自己的原则，以审慎的策略追求更好的长期机会，最终结果会更好。</li><li>当你看到一步好棋的时候，想想有没有更好的走法。</li><li>人类的所有问题，都源于人们不能安静地坐在一个房间里。</li></ul><h2 id="第-10-章-真理-4-培养并维系有价值的人际关系"><a href="#第-10-章-真理-4-培养并维系有价值的人际关系" class="headerlink" title="第 10 章 真理 4 培养并维系有价值的人际关系"></a>第 10 章 真理 4 培养并维系有价值的人际关系</h2><ul><li>把正确的人带入你的生活，没有什么比这更重要。</li><li>通过观察比我们更好的人怎么做，模仿他们的行为，然后亲身实践为什么他们的做法明智有效。</li><li>把时间和精力集中到少数拿得准的人身上，把其他人放一边。</li><li>和更优秀的人在一起，你就会不知不觉地进步。</li></ul><h2 id="第-12-章-投资的-8-条规则"><a href="#第-12-章-投资的-8-条规则" class="headerlink" title="第 12 章 投资的 8 条规则"></a>第 12 章 投资的 8 条规则</h2><ul><li>不要总是查看股价。短期下跌会引发消极情绪，影响大脑。</li><li>如果有人给你推销什么东西，不要买它。</li><li>按照正确顺序研究投资信息。先看最客观的信息，包括年报、季报、股东委托书。</li><li>不要在开市期间买卖股票。</li><li>如果你买的股票下跌了，两年之内不要卖。</li></ul><h2 id="第-13-章-一位投资者的检查清单"><a href="#第-13-章-一位投资者的检查清单" class="headerlink" title="第 13 章 一位投资者的检查清单"></a>第 13 章 一位投资者的检查清单</h2><ul><li>管理团队关键人物是否正在经历个人困难，之前有没有愚蠢自私的行为。</li><li>这家公司能否为社会创造价值。</li><li>公司的收益是否严重依赖信贷市场或某种商品的价格。</li><li>这家公司的股票够便宜吗。</li></ul><h1 id="推荐书单"><a href="#推荐书单" class="headerlink" title="推荐书单"></a>推荐书单</h1><p>这本书的一大特点是行文中推荐了很多书，就像读学术 paper 一样，好 paper 的 reference 也值得好好读一读，所以把每章推荐书目和豆瓣链接整理到下面。</p><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><ul><li><a href="https://book.douban.com/subject/5243775/">聪明的投资者 本杰明·格雷厄姆</a></li><li><a href="https://book.douban.com/subject/26831789/">穷查理宝典 彼得·考夫曼</a></li></ul><h2 id="第-1-章-1"><a href="#第-1-章-1" class="headerlink" title="第 1 章"></a>第 1 章</h2><ul><li><a href="https://book.douban.com/subject/5291820/">我是这样从销售失败走向销售成功的 弗兰克·贝特格</a></li><li><a href="https://movie.douban.com/subject/2997076/">华尔街之狼 马丁·斯科塞斯</a></li><li><a href="https://book.douban.com/subject/6014021/">债券市场：分析与策略 弗兰克·法博齐</a></li><li><a href="https://book.douban.com/subject/3164123/">巴菲特传：一个美国资本家的成长</a></li></ul><h2 id="第-3-章-1"><a href="#第-3-章-1" class="headerlink" title="第 3 章"></a>第 3 章</h2><ul><li><a href="https://book.douban.com/subject/3129355/">憨夺型投资者 : 低风险高收益的投资模式 莫尼什·帕伯莱</a></li><li><a href="https://book.douban.com/subject/1056295/">人性的弱点 戴尔·卡耐基</a></li><li><a href="https://book.douban.com/subject/2368126/">思考致富 拿破仑·希尔</a></li></ul><h2 id="第-5-章-1"><a href="#第-5-章-1" class="headerlink" title="第 5 章"></a>第 5 章</h2><ul><li><a href="https://book.douban.com/subject/1786387/">影响力 罗伯特·西奥迪尼</a></li><li><a href="https://book.douban.com/subject/10799082/">投资最重要的事 霍华德·马克斯</a></li></ul><h2 id="第-7-章"><a href="#第-7-章" class="headerlink" title="第 7 章"></a>第 7 章</h2><ul><li><a href="https://book.douban.com/subject/2359003/">沉思录 马可·奥勒留</a></li></ul><h2 id="第-8-章"><a href="#第-8-章" class="headerlink" title="第 8 章"></a>第 8 章</h2><ul><li><a href="https://book.douban.com/subject/10785583/">思考，快与慢 丹尼尔·卡尼曼</a></li><li><a href="https://book.douban.com/subject/34459315/">蚂蚁的故事 博尔特·霍尔多布勒/爱德华·威尔逊</a></li><li><a href="https://book.douban.com/subject/6854525/">黑天鹅：如何应对不可预知的未来 纳西姆•尼古拉斯•塔勒布</a></li><li><a href="https://book.douban.com/subject/10773358/">意志力 罗伊·鲍迈斯特</a></li></ul><h2 id="第-10-章"><a href="#第-10-章" class="headerlink" title="第 10 章"></a>第 10 章</h2><ul><li><a href="https://book.douban.com/subject/2158889/">权力的48条法则 罗伯特·格林</a></li></ul><h2 id="第-11-章"><a href="#第-11-章" class="headerlink" title="第 11 章"></a>第 11 章</h2><ul><li><a href="https://book.douban.com/subject/1539067/">柏拉图灵丹 娄·马里诺夫</a></li></ul><h2 id="第-12-章"><a href="#第-12-章" class="headerlink" title="第 12 章"></a>第 12 章</h2><ul><li><a href="https://book.douban.com/subject/26411602/">富甲美国 山姆·沃尔顿</a></li></ul><h2 id="第-13-章"><a href="#第-13-章" class="headerlink" title="第 13 章"></a>第 13 章</h2><ul><li><a href="https://book.douban.com/subject/27168564/">清单革命 阿图·葛文德</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;alert alert-info&quot;&gt;&lt;i class=&quot;fa fa-info&quot;&gt;&lt;/i&gt;
2020 年度最佳图书。
&lt;/div&gt;
    
    </summary>
    
      <category term="读书" scheme="http://tommyjiang.github.io/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="投资" scheme="http://tommyjiang.github.io/tags/%E6%8A%95%E8%B5%84/"/>
    
  </entry>
  
  <entry>
    <title>Homebrew 降级</title>
    <link href="http://tommyjiang.github.io/2020/2020-09-28-homebrew-downgrade/"/>
    <id>http://tommyjiang.github.io/2020/2020-09-28-homebrew-downgrade/</id>
    <published>2020-09-28T01:00:00.000Z</published>
    <updated>2021-04-27T06:17:17.213Z</updated>
    
    <content type="html"><![CDATA[<div class="alert alert-info"><i class="fa fa-info"></i>Homebrew 降级。</div><a id="more"></a><p>Homebrew 最新的 Vim 升级到了 8.2.1750，和 <code>vim-leader-guide</code> 冲突，只能先保持原来的 8.2.1700 版本。</p><ol><li>Homebrew 回退：<code>cd /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core</code>，将 <code>Formula/vim.rb</code> 回退到之前的版本 <code>git checkout &#123;commit id&#125; Formula/vim.rb</code>。</li><li>取消之前版本链接：<code>brew unlink vim</code></li><li>安装旧版：<code>brew install vim</code>，注意 <code>Ctrl + C</code> 跳过 Updating Homebrew 的阶段。</li><li>固定 Vim 版本：<code>brew pin vim</code></li><li>Homebrew 更新到 master：<code>cd /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core</code>，然后 <code>git reset --hard master</code>。</li></ol><p>2020.11.28 更新：目前用 <a href="https://github.com/liuchengxu/vim-which-key">vim-which-key</a> 代替了 <code>vim-leader-guide</code>，可以更新 Homebrew 的 Vim 最新版了。</p><p>2020.12.31 更新：<a href="https://github.com/vim-airline/vim-airline/issues/2312">vim-airline</a> 未兼容 Vim 8.2.2250 版本，先回退到 8.2.2200 版本。</p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;alert alert-info&quot;&gt;&lt;i class=&quot;fa fa-info&quot;&gt;&lt;/i&gt;
Homebrew 降级。
&lt;/div&gt;
    
    </summary>
    
      <category term="Geek" scheme="http://tommyjiang.github.io/categories/Geek/"/>
    
    
      <category term="Homebrew" scheme="http://tommyjiang.github.io/tags/Homebrew/"/>
    
  </entry>
  
  <entry>
    <title>A Tour of C++ 笔记</title>
    <link href="http://tommyjiang.github.io/2020/2020-08-10-a-tour-of-c++/"/>
    <id>http://tommyjiang.github.io/2020/2020-08-10-a-tour-of-c++/</id>
    <published>2020-08-10T14:00:00.000Z</published>
    <updated>2021-04-27T06:17:17.214Z</updated>
    
    <content type="html"><![CDATA[<div class="alert alert-info"><i class="fa fa-info"></i>祖师爷写的入门书。</div><a id="more"></a><h1 id="The-Basics"><a href="#The-Basics" class="headerlink" title="The Basics"></a>The Basics</h1><ul><li>C++ 是编译语言，源代码需要经过编译、链接才能生成可执行程序。</li><li>ISO C++ 包括两部分：<ul><li>核心特性，例如内置类型、循环等。</li><li>标准库，例如容器、I/O 操作等。</li></ul></li><li>C++ 是静态类型语言，编译器必须了解所有变量的类型。</li><li>函数重载：函数同名但参数类型不同</li><li>C++ 逻辑运算符<ul><li>按位运算：&amp; 和 |</li><li>逻辑运算：&amp;&amp; 和 ||</li></ul></li><li>窄化转换：丢失精度的转换，例如将 double 转为 int，将 int 转为 char。初始化时使用大括号({})可避免窄化转换。</li><li>变量作用域<ul><li>局部作用域：适用于函数和 lambda 内声明的变量。作用范围为声明到 block 结束。</li><li>类作用域：类内和 enum class 内定义的变量。作用范围为整个 block。</li><li>命名空间作用域：命名空间内定义的变量。作用范围为声明到 namespace 结束。</li><li>全局作用域：不在任何 block 内定义的变量。</li></ul></li><li>nullptr 是空指针常量。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;alert alert-info&quot;&gt;&lt;i class=&quot;fa fa-info&quot;&gt;&lt;/i&gt;
祖师爷写的入门书。
&lt;/div&gt;
    
    </summary>
    
      <category term="Geek" scheme="http://tommyjiang.github.io/categories/Geek/"/>
    
    
      <category term="C++" scheme="http://tommyjiang.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>YCM 不再支持 Python 3.5</title>
    <link href="http://tommyjiang.github.io/2020/2020-07-29-YCM-drop-py35/"/>
    <id>http://tommyjiang.github.io/2020/2020-07-29-YCM-drop-py35/</id>
    <published>2020-07-29T05:00:00.000Z</published>
    <updated>2021-04-27T06:17:17.213Z</updated>
    
    <content type="html"><![CDATA[<div class="alert alert-info"><i class="fa fa-info"></i>YCM 不再支持 Python 3.5 及以下版本，折腾重新编译 Vim 和 YCM。</div><a id="more"></a><p>YCM 最近的一次 <a href="https://github.com/ycm-core/YouCompleteMe/commit/d3db1cb3a9b83cd8e7370a2af36c82f28f2c0ddf">commit</a> 不再支持 Python 3.5 以下版本，之前自己用 Python 3.5 编译的 Vim 也要跟着升级了。</p><ol><li>升级 Python：老系统没法直接升级 Python，需要自己源码安装。下载 Python 3.8 源码，编译时需要加上 <code>--enable-shared</code> 参数，否则 YCM 没法找到 .so 的动态库。</li><li>重新编译 Vim：编译命令前需要加上 <code>LDFLAGS=-rdynamic</code>，否则动态库无法被其他插件找到。</li><li>重新编译 YCM：现在 YCM 主流的补全用的是 clangd，写 C 系列语言需要编译，<code>python3 install.py --clangd-completer</code>。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;alert alert-info&quot;&gt;&lt;i class=&quot;fa fa-info&quot;&gt;&lt;/i&gt;
YCM 不再支持 Python 3.5 及以下版本，折腾重新编译 Vim 和 YCM。
&lt;/div&gt;
    
    </summary>
    
      <category term="Geek" scheme="http://tommyjiang.github.io/categories/Geek/"/>
    
    
      <category term="Vim" scheme="http://tommyjiang.github.io/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>三十而已影评</title>
    <link href="http://tommyjiang.github.io/2020/2020-07-25-nothing-but-thirty/"/>
    <id>http://tommyjiang.github.io/2020/2020-07-25-nothing-but-thirty/</id>
    <published>2020-07-25T01:30:00.000Z</published>
    <updated>2021-04-27T06:17:17.213Z</updated>
    
    <content type="html"><![CDATA[<div class="alert alert-info"><i class="fa fa-info"></i>好久没刷一部像样的国产情感剧了。</div><a id="more"></a><!-- markdown-toc start - Don't edit this section. Run M-x markdown-toc-refresh-toc --><p><strong>目录</strong></p><ul><li><a href="#分集影评">分集影评</a><ul><li><a href="#16-集">16 集</a></li><li><a href="#17-集">17 集</a></li><li><a href="#18-集">18 集</a></li><li><a href="#19-集">19 集</a></li><li><a href="#20-集">20 集</a></li></ul></li></ul><!-- markdown-toc end --><h1 id="分集影评"><a href="#分集影评" class="headerlink" title="分集影评"></a>分集影评</h1><h2 id="16-集"><a href="#16-集" class="headerlink" title="16 集"></a>16 集</h2><ul><li>芹阳组合感情升温中，骑摩托车抓上了，开心，干掉前夫哥。</li><li>漫妮升副店失败，惨遭空降，Daisy 一看就是总部有人，毕业直接进总部锻炼，现在到基层挂个职，回去马上提拔，这种人千万别惹。</li><li>Daisy 有一手，打一棒子给一甜枣，漫妮也是逢场作戏。</li><li>江疏影长得和江珊有点像。</li><li>Daisy 秀英文那段，除了王太太听不懂，其他人都能听懂。</li><li>Daisy 还是会抓富人心理，不选好看的，只选独一无二的。</li><li>顾佳这名字起得不错，暗示要顾家，一直处在事业和家庭的矛盾中。</li><li>芹洋组合喝多了以后，又送晓芹回前夫家了，编的不好。</li></ul><h2 id="17-集"><a href="#17-集" class="headerlink" title="17 集"></a>17 集</h2><ul><li>梁总当众确立关系，和他的人设不太相符，而且在确定关系后才说自己是不婚主义者，完蛋玩意儿。</li><li>末位淘汰是违反劳动法的，虽然国内大厂也是末位淘汰。雪崩之下没有一片雪花是无辜的。</li><li>梁总深刻了，灵魂拷问，结婚就能保证永远相爱吗。</li><li>顾佳和我们用的同款指甲刀，有点卡萨帝的感觉了啊。</li><li>顾佳对漫妮发动了暴击伤害，毫不留情面。</li></ul><h2 id="18-集"><a href="#18-集" class="headerlink" title="18 集"></a>18 集</h2><ul><li>场景切换时顾佳生日四个字显得很傻。</li><li>佳爸说评上先进了，年底发了奖金就换车，体制内一般先进也发不了多少钱。</li></ul><h2 id="19-集"><a href="#19-集" class="headerlink" title="19 集"></a>19 集</h2><ul><li>店长心态不行，还害怕受伤顾客讹她们，这是有钱人干的事儿么。</li><li>什么都能忍，忍到最后忍无可忍。</li><li>人没得选，事儿就简单了。选择多，诱惑就多，人就想不明白了。</li><li>自己 SB，别赖别人。</li></ul><h2 id="20-集"><a href="#20-集" class="headerlink" title="20 集"></a>20 集</h2><ul><li>总部空降的 Daisy 说她都是靠自己本事，不是靠关系。</li><li>晋升就是公司用来洗脑的。</li><li>人走的每一步都得付出代价。</li></ul><h2 id="22-集"><a href="#22-集" class="headerlink" title="22 集"></a>22 集</h2><ul><li>资本都爱听故事，讲故事真是核心竞争能力，包装也很重要。</li></ul><h2 id="23-24-集"><a href="#23-24-集" class="headerlink" title="23-24 集"></a>23-24 集</h2><ul><li>有些事儿急不得。</li><li>不像我，只能喝最苦的咖啡。</li><li>这么拼是为了什么。</li><li>该受的他们也得受。</li><li>你这话是说给我听呢，还是说给自己听呢。</li><li>八年了，我从未想过离开。</li></ul><h2 id="25-26-集"><a href="#25-26-集" class="headerlink" title="25-26 集"></a>25-26 集</h2><ul><li>不过你那么拼也没啥用。</li><li>还有谁的人生比我更惨呢？</li></ul><h2 id="29-30-集"><a href="#29-30-集" class="headerlink" title="29-30 集"></a>29-30 集</h2><ul><li>人越努力就越不满足，越不满足就越不幸福</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;alert alert-info&quot;&gt;&lt;i class=&quot;fa fa-info&quot;&gt;&lt;/i&gt;
好久没刷一部像样的国产情感剧了。
&lt;/div&gt;
    
    </summary>
    
      <category term="生活" scheme="http://tommyjiang.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="国产剧" scheme="http://tommyjiang.github.io/tags/%E5%9B%BD%E4%BA%A7%E5%89%A7/"/>
    
  </entry>
  
  <entry>
    <title>海滨消夏</title>
    <link href="http://tommyjiang.github.io/2020/2020-07-25-seaside-trip/"/>
    <id>http://tommyjiang.github.io/2020/2020-07-25-seaside-trip/</id>
    <published>2020-07-20T01:30:00.000Z</published>
    <updated>2021-04-27T06:17:17.214Z</updated>
    
    <content type="html"><![CDATA[<div class="alert alert-info"><i class="fa fa-info"></i>夏天到秦皇岛来避暑。</div><a id="more"></a><p>又是一年盛夏，时隔两年再次来海边度假。</p><p>周五晚从北京出发，东五环有点堵，改道机场高速+京秦高速+塘承高速转到 G1 上，路过唐山的时候还下了不小的雨，九点多才到家。</p><p>第二天早上一大早被外面的知了吵醒，这两天正好赶上河北省中考。在之前住的小区转了转，喝了拆骨汤，现在分量也不如原来了。回来稍作休整到体育基地海边，下了一小会儿雨，拍到了积雨云掠过的海景。</p><p>中午到秦皇国际吃自助，和奶奶家的亲戚会合，老正一听来海边高兴了。前几天北京疫情严重的时候，酒店的自助还有大龙虾，最近人多了只剩麻小了。吃完中午饭到北戴河海滨的宾馆休息，下午本想在旁边的海边玩，疫情原因全部收口只能在一个地方进到浴场，还好北京的大部队没有完全开过来。晚上在同德海鲜·烤鸭店吃的晚饭，海鲜不错，尤其喜欢蒜蓉粉丝蒸虾，海边的还是新鲜。</p><p>第二天早上没有继续在北戴河海边了，还是回秦皇岛体育基地，天气还是多云，不算太晒，但我们也把帐篷都搭起来了。老正一蹦一蹦地跟着后边跑。中午还是赵家馆饺子，饺子放油多还是香，榴莲馅的也挺有特色。中午休息会返京，双井附近的潮汕牛肉火锅解决晚饭。就是稍微有点远，不然可以多来几次玩玩。</p><img src="/images/2020/北戴河.jpg" width="500px"/><img src="/images/2020/秦皇岛.jpg" width="500px"/>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;alert alert-info&quot;&gt;&lt;i class=&quot;fa fa-info&quot;&gt;&lt;/i&gt;
夏天到秦皇岛来避暑。
&lt;/div&gt;
    
    </summary>
    
      <category term="生活" scheme="http://tommyjiang.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="秦皇岛" scheme="http://tommyjiang.github.io/tags/%E7%A7%A6%E7%9A%87%E5%B2%9B/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Weekly Contest 165</title>
    <link href="http://tommyjiang.github.io/2019/2019-12-01-LC-weekly-contest-165/"/>
    <id>http://tommyjiang.github.io/2019/2019-12-01-LC-weekly-contest-165/</id>
    <published>2019-12-01T09:00:00.000Z</published>
    <updated>2021-04-27T06:17:17.209Z</updated>
    
    <content type="html"><![CDATA[<div class="alert alert-info"><i class="fa fa-info"></i>LeetCode Weekly Contest 165.</div><a id="more"></a><h1 id="问题-1"><a href="#问题-1" class="headerlink" title="问题 1"></a>问题 1</h1><p><a href="https://leetcode.com/problems/find-winner-on-a-tic-tac-toe-game/">题目链接</a></p><p>判断每行、每列、两条对角线的字符是否相同，棋盘状态始终有效，不需要考虑 corner case。</p><h1 id="问题-2"><a href="#问题-2" class="headerlink" title="问题 2"></a>问题 2</h1><p><a href="https://leetcode.com/problems/number-of-burgers-with-no-waste-of-ingredients/">题目链接</a></p><p>鸡兔同笼问题，数学题。</p><h1 id="问题-3"><a href="#问题-3" class="headerlink" title="问题 3"></a>问题 3</h1><p><a href="https://leetcode.com/problems/count-square-submatrices-with-all-ones/">题目链接</a></p><p>这道题比赛的时候没做出来，结束后发现想复杂了，进阶题是求所有元素是 1 的子矩阵(不要求方阵)。</p><p>解法：DP，根据左、上、左上三者最小值更新当前值，参考 <a href="https://leetcode.com/problems/maximal-square/">LC 221</a>。</p><p>复杂度：时间复杂度 O(n^2)，空间复杂度 O(n^2)，可优化为 O(n)。</p><p>Python<br><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">countSquares</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> A<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        m<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> A<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                   dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> A<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>                   res <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>C++<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">countSquares</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>vector <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">dp</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    res <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h1 id="问题-4"><a href="#问题-4" class="headerlink" title="问题 4"></a>问题 4</h1><p><a href="https://leetcode.com/problems/palindrome-partitioning-iii/">题目链接</a><br>解法：DP。<br>复杂度：时间复杂度 O(kn^2)，空间复杂度 O(kn)。</p><p>Python<br><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">palindromePartition</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        memo <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">def</span> <span class="token function">cost</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">:</span>            r <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">while</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">:</span>                <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                    r <span class="token operator">+=</span> <span class="token number">1</span>                i <span class="token operator">+=</span> <span class="token number">1</span>                j <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">return</span> r        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token keyword">in</span> memo<span class="token punctuation">:</span>                 <span class="token keyword">return</span> memo<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> n <span class="token operator">-</span> i <span class="token operator">==</span> k<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token number">0</span>            <span class="token keyword">if</span> k <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> cost<span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            res <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">-</span> k <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                res <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> cost<span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> dfs<span class="token punctuation">(</span>j<span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            memo<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> res            <span class="token keyword">return</span> res        <span class="token keyword">return</span> dfs<span class="token punctuation">(</span><span class="token number">0</span> <span class="token punctuation">,</span> k<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>C++<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">palindromePartition</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>vector <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">memo</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> memo<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">cost</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                res<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> dp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> i <span class="token operator">==</span> k<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">cost</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token operator">-</span>k<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            res <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token function">cost</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> n<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;alert alert-info&quot;&gt;&lt;i class=&quot;fa fa-info&quot;&gt;&lt;/i&gt;
LeetCode Weekly Contest 165.
&lt;/div&gt;
    
    </summary>
    
      <category term="工作" scheme="http://tommyjiang.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
      <category term="LeetCode" scheme="http://tommyjiang.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Biweekly Contest 14</title>
    <link href="http://tommyjiang.github.io/2019/2019-11-30-LC-biweekly-contest-14/"/>
    <id>http://tommyjiang.github.io/2019/2019-11-30-LC-biweekly-contest-14/</id>
    <published>2019-12-01T04:00:00.000Z</published>
    <updated>2021-04-27T06:17:17.210Z</updated>
    
    <content type="html"><![CDATA[<div class="alert alert-info"><i class="fa fa-info"></i>LeetCode Biweekly Contest 14.</div><a id="more"></a><h1 id="问题-1"><a href="#问题-1" class="headerlink" title="问题 1"></a>问题 1</h1><p><a href="https://leetcode.com/problems/hexspeak/">题目链接</a></p><p>整数转换为 16 进制字符串：</p><ul><li>Python 用自带的 <code>hex</code> 函数。</li><li>C++ 用 <code>stringstream</code> 中的 <code>hex</code>。</li></ul><p>Python<br><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">toHexspeak</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>        num <span class="token operator">=</span> <span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        num <span class="token operator">=</span> num<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'I'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> num<span class="token punctuation">:</span>            <span class="token keyword">if</span> x <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token punctuation">&#123;</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"E"</span><span class="token punctuation">,</span> <span class="token string">"F"</span><span class="token punctuation">,</span> <span class="token string">"I"</span><span class="token punctuation">,</span> <span class="token string">"O"</span><span class="token punctuation">&#125;</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token string">'ERROR'</span>        <span class="token keyword">return</span> num<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>C++<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">toHexspeak</span><span class="token punctuation">(</span>string num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">auto</span> n <span class="token operator">=</span> <span class="token function">stol</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        stringstream st<span class="token punctuation">;</span>        st <span class="token operator">&lt;&lt;</span> hex <span class="token operator">&lt;&lt;</span> uppercase <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">;</span>  <span class="token comment">// 用 hex + uppercase 进行转换</span>        string <span class="token function">s</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token string">'1'</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">"ERROR"</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">)</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'O'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'I'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h1 id="问题-2"><a href="#问题-2" class="headerlink" title="问题 2"></a>问题 2</h1><p><a href="https://leetcode.com/problems/remove-interval/">题目链接</a></p><p>解法：遍历判断与每个 interval 起始/结束时间的关系。<br>复杂度：时间复杂度 O(n)，空间复杂度 O(n)。</p><p>Python<br><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">removeInterval</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> intervals<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                       toBeRemoved<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        s<span class="token punctuation">,</span> e <span class="token operator">=</span> toBeRemoved        <span class="token keyword">for</span> i<span class="token punctuation">,</span> interval <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>intervals<span class="token punctuation">)</span><span class="token punctuation">:</span>            i_s<span class="token punctuation">,</span> i_e <span class="token operator">=</span> interval            <span class="token keyword">if</span> s <span class="token operator">>=</span> i_e <span class="token keyword">or</span> e <span class="token operator">&lt;=</span> i_s<span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>interval<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i_s <span class="token operator">&lt;</span> s <span class="token operator">&lt;=</span> i_e<span class="token punctuation">:</span>                    res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>i_s<span class="token punctuation">,</span> s<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> i_s <span class="token operator">&lt;=</span> e <span class="token operator">&lt;</span> i_e<span class="token punctuation">:</span>                    res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>e<span class="token punctuation">,</span> i_e<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>C++<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">removeInterval</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> intervals<span class="token punctuation">,</span>                                       vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> toBeRemoved<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> res<span class="token punctuation">;</span>        <span class="token keyword">int</span> s <span class="token operator">=</span> toBeRemoved<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> e <span class="token operator">=</span> toBeRemoved<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> intervals<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> i_s <span class="token operator">=</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i_e <span class="token operator">=</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">>=</span> i_e <span class="token operator">||</span> e <span class="token operator">&lt;=</span> i_s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">&#123;</span>i_s<span class="token punctuation">,</span> i_e<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i_s <span class="token operator">&lt;</span> s <span class="token operator">&amp;&amp;</span> s <span class="token operator">&lt;=</span> i_e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">&#123;</span>i_s<span class="token punctuation">,</span> s<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i_s <span class="token operator">&lt;=</span> e <span class="token operator">&amp;&amp;</span> e <span class="token operator">&lt;</span> i_e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">&#123;</span>e<span class="token punctuation">,</span> i_e<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h1 id="问题-3"><a href="#问题-3" class="headerlink" title="问题 3"></a>问题 3</h1><p><a href="https://leetcode.com/problems/can-make-palindrome-from-substring/">题目链接</a></p><p>解法：DFS，利用返回值计数。</p><p>复杂度：时间复杂度 O(n)，空间复杂度 O(n)。</p><p>Python<br><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">deleteTreeNodes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nodes<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> parent<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        nei <span class="token operator">=</span> collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> x <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> x <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                nei<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>n <span class="token operator">=</span> nodes        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>            res <span class="token operator">=</span> value<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            ces <span class="token operator">=</span> <span class="token number">1</span>            <span class="token keyword">for</span> x <span class="token keyword">in</span> nei<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                s<span class="token punctuation">,</span> c <span class="token operator">=</span> dfs<span class="token punctuation">(</span>x<span class="token punctuation">)</span>                res <span class="token operator">+=</span> s                ces <span class="token operator">+=</span> c <span class="token keyword">if</span> s <span class="token operator">!=</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">0</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>res<span class="token punctuation">,</span> ces<span class="token punctuation">)</span> <span class="token keyword">if</span> res <span class="token operator">!=</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        s<span class="token punctuation">,</span> c <span class="token operator">=</span> dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>C++<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">nodeNum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> value<span class="token punctuation">,</span> <span class="token keyword">int</span> node<span class="token punctuation">,</span> unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> nei<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> value<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>child <span class="token operator">:</span> nei<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res <span class="token operator">=</span> <span class="token function">nodeNum</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> child<span class="token punctuation">,</span> nei<span class="token punctuation">)</span><span class="token punctuation">;</span>            sum <span class="token operator">+=</span> res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            count <span class="token operator">+=</span> <span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>sum<span class="token punctuation">,</span> sum <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> count<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">deleteTreeNodes</span><span class="token punctuation">(</span><span class="token keyword">int</span> nodes<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> parent<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> root <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> nei<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> parent<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            nei<span class="token punctuation">[</span>parent<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> root <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res <span class="token operator">=</span> <span class="token function">nodeNum</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> root<span class="token punctuation">,</span> nei<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h1 id="问题-4"><a href="#问题-4" class="headerlink" title="问题 4"></a>问题 4</h1><p><a href="https://leetcode.com/problems/number-of-ships-in-a-rectangle/">题目链接</a><br>解法：两个坐标二分搜索。</p><p>Python<br><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">countShips</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> sea<span class="token punctuation">:</span> <span class="token string">'Sea'</span><span class="token punctuation">,</span> P<span class="token punctuation">:</span> <span class="token string">'Point'</span><span class="token punctuation">,</span> Q<span class="token punctuation">:</span> <span class="token string">'Point'</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">if</span> P<span class="token punctuation">.</span>x <span class="token operator">>=</span> Q<span class="token punctuation">.</span>x <span class="token keyword">and</span> P<span class="token punctuation">.</span>y <span class="token operator">>=</span> Q<span class="token punctuation">.</span>y <span class="token keyword">and</span> sea<span class="token punctuation">.</span>hasShips<span class="token punctuation">(</span>P<span class="token punctuation">,</span> Q<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> P<span class="token punctuation">.</span>x <span class="token operator">==</span> Q<span class="token punctuation">.</span>x <span class="token keyword">and</span> P<span class="token punctuation">.</span>y <span class="token operator">==</span> Q<span class="token punctuation">.</span>y<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">1</span>            mx<span class="token punctuation">,</span> my <span class="token operator">=</span> <span class="token punctuation">(</span>P<span class="token punctuation">.</span>x <span class="token operator">+</span> Q<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>P<span class="token punctuation">.</span>y <span class="token operator">+</span> Q<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>            res <span class="token operator">+=</span> self<span class="token punctuation">.</span>countShips<span class="token punctuation">(</span>sea<span class="token punctuation">,</span> P<span class="token punctuation">,</span> Point<span class="token punctuation">(</span>mx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> my <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            res <span class="token operator">+=</span> self<span class="token punctuation">.</span>countShips<span class="token punctuation">(</span>sea<span class="token punctuation">,</span> Point<span class="token punctuation">(</span>mx<span class="token punctuation">,</span> P<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> Point<span class="token punctuation">(</span>Q<span class="token punctuation">.</span>x<span class="token punctuation">,</span> my <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            res <span class="token operator">+=</span> self<span class="token punctuation">.</span>countShips<span class="token punctuation">(</span>sea<span class="token punctuation">,</span> Point<span class="token punctuation">(</span>mx<span class="token punctuation">,</span> my<span class="token punctuation">)</span><span class="token punctuation">,</span> Q<span class="token punctuation">)</span>            res <span class="token operator">+=</span> self<span class="token punctuation">.</span>countShips<span class="token punctuation">(</span>sea<span class="token punctuation">,</span> Point<span class="token punctuation">(</span>P<span class="token punctuation">.</span>x<span class="token punctuation">,</span> my<span class="token punctuation">)</span><span class="token punctuation">,</span> Point<span class="token punctuation">(</span>mx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> Q<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>C++<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">countShips</span><span class="token punctuation">(</span>Sea sea<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> topRight<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> bottomLeft<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>topRight<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">>=</span> bottomLeft<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> topRight<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> bottomLeft<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>             <span class="token operator">&amp;&amp;</span> sea<span class="token punctuation">.</span><span class="token function">hasShips</span><span class="token punctuation">(</span>topRight<span class="token punctuation">,</span> bottomLeft<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>topRight<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> bottomLeft<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> topRight<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> bottomLeft<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">int</span> mx <span class="token operator">=</span> <span class="token punctuation">(</span>topRight<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> bottomLeft<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> my <span class="token operator">=</span> <span class="token punctuation">(</span>topRight<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> bottomLeft<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            res <span class="token operator">+=</span> <span class="token function">countShips</span><span class="token punctuation">(</span>sea<span class="token punctuation">,</span> topRight<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>mx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> my<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res <span class="token operator">+=</span> <span class="token function">countShips</span><span class="token punctuation">(</span>sea<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>mx<span class="token punctuation">,</span> topRight<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>bottomLeft<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> my<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res <span class="token operator">+=</span> <span class="token function">countShips</span><span class="token punctuation">(</span>sea<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>mx<span class="token punctuation">,</span> my<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> bottomLeft<span class="token punctuation">)</span><span class="token punctuation">;</span>            res <span class="token operator">+=</span> <span class="token function">countShips</span><span class="token punctuation">(</span>sea<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>topRight<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> my<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>mx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> bottomLeft<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;alert alert-info&quot;&gt;&lt;i class=&quot;fa fa-info&quot;&gt;&lt;/i&gt;
LeetCode Biweekly Contest 14.
&lt;/div&gt;
    
    </summary>
    
      <category term="工作" scheme="http://tommyjiang.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
      <category term="LeetCode" scheme="http://tommyjiang.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>目标检测中的样本不平衡问题</title>
    <link href="http://tommyjiang.github.io/2019/2019-09-01-imbalance-in-detection/"/>
    <id>http://tommyjiang.github.io/2019/2019-09-01-imbalance-in-detection/</id>
    <published>2019-09-01T10:00:00.000Z</published>
    <updated>2021-04-27T06:17:17.211Z</updated>
    
    <content type="html"><![CDATA[<div class="alert alert-info"><i class="fa fa-info"></i>处理 imbalance 的方法。</div><a id="more"></a><h1 id="目标检测中的样本不平衡问题"><a href="#目标检测中的样本不平衡问题" class="headerlink" title="目标检测中的样本不平衡问题"></a>目标检测中的样本不平衡问题</h1><p>目标检测中的样本不平衡问题，是指对于目标检测模型，负样本的个数远多于正样本(比例约为 10000:1)，同时，负样本中简单负样本的个数也远多于困难负样本。模型训练过程中，需要避免这种不平衡对模型性能的影响，以免模型将所有样本都判断为负样本。</p><ul><li>单阶段网络：目前绝大多数单阶段网络仍然基于 anchor 。网络 anchor 的正负样本和困难/简单负样本不平衡问题十分突出。</li><li>两阶段网络：两阶段网络中第一阶段的 RPN 与单阶段网络类似，但第二阶段 proposal 的不平衡问题得到了很大缓解，这主要是由于 RPN 处理(top N_pre + nms + top N_pos)后，proposal 中的简单负样本大大减少，从而同时减轻了正负样本和困难/简单负样本的不平衡问题。</li></ul><h1 id="解决样本不平衡的方法"><a href="#解决样本不平衡的方法" class="headerlink" title="解决样本不平衡的方法"></a>解决样本不平衡的方法</h1><h2 id="按比例随机采样"><a href="#按比例随机采样" class="headerlink" title="按比例随机采样"></a>按比例随机采样</h2><p>Faster R-CNN 中，第一阶段 RPN 采用按比例随机采样，图片 batch size 为 1，anchor batch size 为 256，正负样本比例为 1 比 1，如果正样本不足 128(256 的 1/2)，则用负样本凑。</p><blockquote><p>We randomly sample 256 anchors in an image to compute the loss function of a mini-batch, where the sampled positive and negative anchors have a ratio of up to 1:1. If there are fewer than 128 positive samples in an image, we pad the mini-batch with negative ones.(Faster R-CNN 3.1.3 Training RPN)</p></blockquote><p>第二阶段 Fast R-CNN 同样采用按比例随机采样，正负样本比例为 1:3。</p><blockquote><p>We take 25% of the RoIs from object proposals that have intersection over union (IoU) overlap with a ground truth bounding box of at least 0:5. These RoIs comprise the examples labeled with a foreground object class. The remaining RoIs are sampled from object proposals that have a maximum IoU with ground truth in the interval [0:1; 0:5), following [11].(Fast R-CNN 2.3 Mini-batch sampling)</p></blockquote><h2 id="在线难样本挖掘-OHEM-Online-Hard-Example-Mining"><a href="#在线难样本挖掘-OHEM-Online-Hard-Example-Mining" class="headerlink" title="在线难样本挖掘(OHEM, Online Hard Example Mining)"></a>在线难样本挖掘(OHEM, Online Hard Example Mining)</h2><p>按比例随机采样控制了正负样本的比例，基本解决了正负样本不平衡的问题，但负样本的随机采样会导致简单负样本占绝大多数。SSD 在训练时加入了难样本挖掘，选出负样本中 loss 最大的进行训练，同时仍然保证正负样本比例为 1:3，以解决简单/困难负样本不平衡的问题。</p><blockquote><p>Instead of using all the negative examples, we sort them using the highest confidence loss for each default box and pick the top ones so that the ratio between the negatives and positives is at most 3:1. We found that this leads to faster optimization and a more stable training.(SSD 2.2 Training Hard negative mining)</p></blockquote><h2 id="Focal-Loss"><a href="#Focal-Loss" class="headerlink" title="Focal Loss"></a>Focal Loss</h2><p>Focal loss 应该是最有名的处理不平衡问题的 paper 了，文中提出了一种新的 loss 即 focal loss：</p><script type="math/tex; mode=display">\mathrm{FL}(p_t) = -\alpha_{t}(1-p_t)^{\gamma}\mathrm{log}(p_t)</script><p>其中 $ \alpha_t $ 作用是平衡正负样本权重，$ \gamma $ 作用是平衡简单/困难负样本权重，所以 focal loss 理论上能同时解决上面提到的两方面不平衡问题。原 paper 中给出的结果，$\alpha_t = 0.25, \gamma = 2 $ 时效果最好。注意，使用 focal loss 后，不需要再保证正负样本比例，原文中使用了所有 anchor 进行训练。</p><blockquote><p>We emphasize that when training RetinaNet, the focal loss is applied to all ~100k anchors in each sampled image.(Focal loss 4.1 Inference and Training Focal Loss)</p></blockquote><h2 id="IoU-平衡采样"><a href="#IoU-平衡采样" class="headerlink" title="IoU 平衡采样"></a>IoU 平衡采样</h2><p>OHEM 存在以下两个问题：</p><ol><li>需要计算所有 anchor 的 loss，付出额外的空间和时间代价。</li><li>标注如果有 noise label，会影响模型性能。</li></ol><p>IoU 平衡采样是 Libra R-CNN 中提出的，作者发现 60% 的困难负样本与 GT 的 IoU 都大于 0.05，而随机采样时与 GT IoU 大于 0.05 的 anchor 只占 30%，说明困难负样本不容易被选中。这个方法的核心思想是根据 anchor 与 GT 的 IoU 划分不同区间，在每个区间中进行均匀采样，保证与 GT IoU 大的负样本(很多是困难负样本)能够以较大的概率被选中。</p><blockquote><p>To raise the selected probability of hard negatives, we evenly split the sampling interval into K bins according to IoU. N demanded negative samples are equally distributed to each bin. Then we select samples from them uniformly.</p></blockquote><h2 id="GHM"><a href="#GHM" class="headerlink" title="GHM"></a>GHM</h2><p>GHM 文章首先根据梯度的模和样本的 label 将样本分为难易不同的样本，梯度的模越接近 0 说明越简单，越接近 1 则说明越困难。文章发现对于训练好的 detection 模型，仍然存在相当比例的困难样本，需要解决的具体问题是如何适当降低这部分困难样本的权重，提升模型性能。</p><p>为此，文中首先定义了梯度密度的概念，用于刻画一个样本梯度模值附近所有样本的总数，总数越多说明样本处的密度越高。</p><ul><li>分类 loss：采用加权交叉熵，权重为梯度密度的倒数，即降低密集样本的权重，这样就同时降低了非常密集的简单样本和同样密集的困难样本的权重。</li><li>回归 loss：采用改进的 Smooth L1 loss($\sqrt{d^2 + \mu ^ 2} - \mu$)，类似分类 loss 同样采用加权平均，同时降低简单和困难样本的权重。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;alert alert-info&quot;&gt;&lt;i class=&quot;fa fa-info&quot;&gt;&lt;/i&gt;
处理 imbalance 的方法。
&lt;/div&gt;
    
    </summary>
    
      <category term="工作" scheme="http://tommyjiang.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
      <category term="CV" scheme="http://tommyjiang.github.io/tags/CV/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Weekly Contest 152</title>
    <link href="http://tommyjiang.github.io/2019/2019-09-01-LC-weekly-contest-152/"/>
    <id>http://tommyjiang.github.io/2019/2019-09-01-LC-weekly-contest-152/</id>
    <published>2019-09-01T06:00:00.000Z</published>
    <updated>2021-04-27T06:17:17.210Z</updated>
    
    <content type="html"><![CDATA[<div class="alert alert-info"><i class="fa fa-info"></i>LeetCode Weekly Contest 152.</div><a id="more"></a><h1 id="问题-1"><a href="#问题-1" class="headerlink" title="问题 1"></a>问题 1</h1><p><a href="https://leetcode.com/problems/prime-arrangements/">题目链接</a></p><p>思路：从 1 到 n 质数和合数分别计数，结果为<code>质数阶乘 * 合数阶乘 % MOD</code>。<br>复杂度：时间复杂度 O(n^2)，空间复杂度 O(1)。</p><p>Python<br><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">numPrimeArrangements</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">is_prime</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n <span class="token operator">//</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        p <span class="token operator">=</span> <span class="token number">0</span>        c <span class="token operator">=</span> <span class="token number">1</span>        mod <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">**</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">7</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> is_prime<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>                p <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                c <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> math<span class="token punctuation">.</span>factorial<span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">%</span> mod <span class="token operator">*</span> math<span class="token punctuation">.</span>factorial<span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>C++<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">prime</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">*</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">numPrimeArrangements</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> <span class="token keyword">int</span> MOD <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">prime</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                p <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                c <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> p<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            res <span class="token operator">=</span> res <span class="token operator">*</span> i <span class="token operator">%</span> MOD<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> c<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            res <span class="token operator">=</span> res <span class="token operator">*</span> i <span class="token operator">%</span> MOD<span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h1 id="问题-2"><a href="#问题-2" class="headerlink" title="问题 2"></a>问题 2</h1><p><a href="https://leetcode.com/problems/diet-plan-performance/">题目链接</a></p><p>解法：计算前缀和，每次去掉一个元素，加入一个元素。<br>复杂度：时间复杂度 O(n)，空间复杂度 O(1)。</p><p>Python<br><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">dietPlanPerformance</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> A<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span>                            lower<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> upper<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token number">0</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>        s <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span><span class="token punctuation">:</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> s <span class="token operator">></span> upper<span class="token punctuation">:</span>            res <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">elif</span> s <span class="token operator">&lt;</span> lower<span class="token punctuation">:</span>            res <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>            s <span class="token operator">-=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            s <span class="token operator">+=</span> A<span class="token punctuation">[</span>i<span class="token operator">+</span>k<span class="token punctuation">]</span>            <span class="token keyword">if</span> s <span class="token operator">></span> upper<span class="token punctuation">:</span>                res <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">elif</span> s <span class="token operator">&lt;</span> lower<span class="token punctuation">:</span>                res <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>C++<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">dietPlanPerformance</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> A<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> lower<span class="token punctuation">,</span> <span class="token keyword">int</span> upper<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            s <span class="token operator">+=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">></span> upper<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                res <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">&lt;</span> lower<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                res <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token operator">-</span>k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            s <span class="token operator">-=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            s <span class="token operator">+=</span> A<span class="token punctuation">[</span>i<span class="token operator">+</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">></span> upper<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                res <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">&lt;</span> lower<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                res <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h1 id="问题-3"><a href="#问题-3" class="headerlink" title="问题 3"></a>问题 3</h1><p><a href="https://leetcode.com/problems/can-make-palindrome-from-substring/">题目链接</a></p><p>解法：26 个字母出现个数用前缀哈希存储，查询和比较 key 的差异为 O(1)，注意可以 rearrange，所以字母出现次数差异只保留 % 2 的值，最后对字符串奇偶长度做判断。</p><p>复杂度：时间复杂度 O(n)，空间复杂度 O(n)。</p><p>Python<br><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">canMakePaliQueries</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span>                           queries<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span><span class="token builtin">bool</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>                    f<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    f<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> q <span class="token keyword">in</span> queries<span class="token punctuation">:</span>            l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> k <span class="token operator">=</span> q<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>            odd <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">-</span> f<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                    odd <span class="token operator">+=</span> <span class="token number">1</span>            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>odd <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>C++<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> <span class="token function">canMakePaliQueries</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span>                                    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> queries<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">freq</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> c <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                freq<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> freq<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'a'</span> <span class="token operator">+</span> c <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> answer<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>query <span class="token operator">:</span> queries<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> l <span class="token operator">=</span> query<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> r <span class="token operator">=</span> query<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">=</span> query<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> odd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> c <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>freq<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">-</span> freq<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>                    odd<span class="token operator">++</span><span class="token punctuation">;</span>            answer<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>odd <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> answer<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h1 id="问题-4"><a href="#问题-4" class="headerlink" title="问题 4"></a>问题 4</h1><p><a href="https://leetcode.com/problems/number-of-valid-words-for-each-puzzle/">题目链接</a><br>解法：参考<a href="https://leetcode.com/problems/number-of-valid-words-for-each-puzzle/discuss/371864/Python-Find-all-Sub-Puzzles">寒神的解答</a>。利用 26 位整数的 bit 存储是否包含某个字母状态(状态压缩)，遍历 puzzles 中的元素，枚举包括第一个字母的所有子 string 组合，然后求和。</p><p>复杂度：时间复杂度 O(max(W, P))，空间复杂度 O(W)。</p><p>Python<br><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findNumOfValidWords</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> words<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                            puzzles<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        count <span class="token operator">=</span> collections<span class="token punctuation">.</span>Counter<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> w <span class="token keyword">in</span> words<span class="token punctuation">:</span>            m <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">for</span> c <span class="token keyword">in</span> w<span class="token punctuation">:</span>                m <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            count<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> p <span class="token keyword">in</span> puzzles<span class="token punctuation">:</span>            bfs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">set</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                bfs <span class="token operator">+=</span> <span class="token punctuation">[</span>m <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> m <span class="token keyword">in</span> bfs<span class="token punctuation">]</span>            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span>count<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token keyword">for</span> m <span class="token keyword">in</span> bfs<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>C++<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">findNumOfValidWords</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> words<span class="token punctuation">,</span>                                    vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> puzzles<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> count<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> w<span class="token operator">:</span> words<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> mask <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> c <span class="token operator">:</span> w<span class="token punctuation">)</span>                mask <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>c <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            count<span class="token punctuation">[</span>mask<span class="token punctuation">]</span> <span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> p <span class="token operator">:</span> puzzles<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> mask_p<span class="token punctuation">;</span>            vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> mask_new<span class="token punctuation">;</span>            mask_p<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> p<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                mask_new <span class="token operator">=</span> mask_p<span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> m <span class="token operator">:</span> mask_p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    mask_new<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>m <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                mask_p <span class="token operator">=</span> mask_new<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> m <span class="token operator">:</span> mask_p<span class="token punctuation">)</span>                cnt <span class="token operator">+=</span> count<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;alert alert-info&quot;&gt;&lt;i class=&quot;fa fa-info&quot;&gt;&lt;/i&gt;
LeetCode Weekly Contest 152.
&lt;/div&gt;
    
    </summary>
    
      <category term="工作" scheme="http://tommyjiang.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
      <category term="LeetCode" scheme="http://tommyjiang.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>老妹儿婚礼</title>
    <link href="http://tommyjiang.github.io/2019/2019-08-26-old-sister-wedding/"/>
    <id>http://tommyjiang.github.io/2019/2019-08-26-old-sister-wedding/</id>
    <published>2019-08-26T15:00:00.000Z</published>
    <updated>2021-04-27T06:17:17.212Z</updated>
    
    <content type="html"><![CDATA[<div class="alert alert-info"><i class="fa fa-info"></i>恭贺草原王子大婚。</div><a id="more"></a><p>周末两天时间，特意请假去了趟科尔沁草原的明珠——白城，参加草原王子——老妹儿的婚礼。</p><p>老妹儿是东北方言，使用灵活广泛，能想到和这个词比较接近的，应该是天津方言中的“小姐姐”。和鄙班第一次打交道的朋友，第一次听到鄙班一系列乱中有序的昵称(包括但不限于妹妹、叔叔、奶夫等)时一般都会崩溃，老妹儿自然也在其中。值得一提的是，一般的昵称都是一个人独有，而老妹儿和我两个人则是互称老妹儿。</p><h1 id="出发"><a href="#出发" class="headerlink" title="出发"></a>出发</h1><p>周六一大早萌嫂开车亲自送萌哥、学哥和我到南苑机场，大兴机场今年 9 月底就要投入使用了，这次也算和中国第一个机场——南苑机场(IATA 代码：NAY；ICAO 代码：ZBNY)道个别。每周二、四、六，南苑都有飞白城的航班，省得再去内蒙兴安盟首府乌兰浩特折腾一趟了。</p><p>在登机口遇到了老妹儿的伴郎靖哥哥。我们三个都是 2012 年 7 月广东佛山南海区博士生实践的队员，他俩都分到了南海区最北面的偏远地带，以至于老妹儿周末来找我的时候连住的地方都没有，还和我挤一张床睡了两晚。</p><p>航班正点起飞，沿着跑道向北起飞后一个 180 度转弯掉头向南，第一次在空中看到大兴机场。飞机 12 点降落在白城长安机场，降落时拍了一张机场附近的照片：</p><img src="/images/2019/2019-08-24-白城降落.jpg" width="500px"/><h1 id="预热"><a href="#预热" class="headerlink" title="预热"></a>预热</h1><p>下飞机先到一个饭馆吃正宗东北菜。虽然在北京吃饭的标准至少是人均一个菜，但考虑到东北菜的分量，人均 0.8 个菜都不一定能吃完，再配上独特的甜品：拔丝地瓜，连主食都可以省了。席上新娘亲自介绍一整桌亲朋好友，在见识了新娘的高端朋友后，我果断建议就不要再继续介绍新郎朋友了。老妹儿在席上发表重要讲话，欢迎大家来草原“见识”他们的婚礼。</p><p>酒足饭饱，本该是午休时间，作为长期中午只能在单位眯一小觉的人，热切地期盼能在草原宾馆的床上好好睡一觉。但同学们兴致不减，放下包就出发去 K 歌了。我和萌哥看了一会儿 TI 9 LGD 和 OG 的比赛，略有耽搁，两个人打车过去，起步价 5 元到地方才 7 元，强烈地感受到草原人民的幸福。</p><p>既然到草原 K 歌，当然要点草原歌曲，也不枉我之前去过十几次草原，一图胜千言，秀一下航线图，最密集的就是北京——通辽航线：</p><img src="/images/2019/2019-08-24-白城航线图.jpg" width="300px"/><p>第一次去通辽还是在 2012 年 3 月，有幸当时有老妹儿同行，原因是我的小老板是老妹儿大老板的博士，虽然毕业了还和原来的课题组一起做项目。算起来那是我第一次出差，北京——通辽来回都是硬卧，睡一晚上才到，虽然北京 3 月已经不算冷了，但草原还是冷得够呛，出差回来我就发烧了。</p><p>晚上安排了蒙餐烤全羊，我之前出差吃过不少，没什么特别的感觉。席上高导亲自回答各种娱乐八卦问题，长了不少见识。酒足饭饱后第二场开始，选在老金家烧烤，其实前面那顿大家吃得都差不多了，但第二天还要接亲，所以不能喝太多，简单觥筹交错之后，11 点就回宾馆休息了。</p><h1 id="接亲"><a href="#接亲" class="headerlink" title="接亲"></a>接亲</h1><p>周日早上起来，7 点 50 从酒店出发到老妹儿家楼下，步行 5 分钟就到了。楼下除了一个大彩虹门，还有一排小门，样子让我想起了京都伏见稻荷大社的千本鸟居。</p><p>早上 8 点 18 分，车队准时前往新娘住的威尼斯水上乐园。众所周知，白城是一个国际大都市，拥有威尼斯水上乐园、西雅图精品假日酒店、胜利基辅宾馆等一系列国际化建筑，丝毫不比 2012 年夏天我和老妹儿一起去开会的加州圣迭戈差。除了我们这帮同学，老妹儿的家人有不少也跟车一起过来了。</p><p>第一个项目自然是传统的撞门，这次酒店的门比较特殊，是往外开的，所以里面的兄弟们没法堵，只能往里拽。撞门环节还算顺利，但门打开之后新娘没有同意老妹儿进屋，于是在老妹儿的带领下，同学们分别用中英文表达了诚意：</p><blockquote><p>中：我来接你了。<br>英：I’m coming for you.</p></blockquote><p>高级知识分子的婚礼，没点文化水平还真不敢来。</p><p>进屋后先做三个游戏，抖甩乒乓球、诸葛帽吃糖、脸撕保鲜膜。</p><ol><li><p>抖甩乒乓球：老妹儿参加的唯一一个游戏。盒子装满乒乓球，绑在腰后面，不许用手，把所有乒乓球跳出来，老妹儿跳的劲太大，别的花都跳掉了。</p></li><li><p>诸葛帽吃糖：新娘不让老妹儿继续玩了，只能我们这群同学上了。这个游戏如果只允许自己吃自己的，还是很有难度的，好在可以几个人互换吃糖。</p></li><li><p>脸撕保鲜膜：这个游戏很熟悉，去年我婚礼的时候就玩过，重点是不能靠脸用蛮力弄破，要用头顶破。</p></li></ol><p>游戏做完就到了喜闻乐见的找鞋环节。在围观第一个游戏的时候我就在看后面窗帘架上面有没有，最后揭晓后发现是别在两个窗帘中间了，另外一只藏到了岳父岳母坐的沙发后面。</p><p>出门之前，按照新娘当地的习俗，新郎还需要面向父母和新娘家乡方向磕头，老妹儿干净利落地完成，赢得了在场群众的纷纷喝彩。顺利接亲归来，在家里合影留念，前往典礼现场。</p><h1 id="典礼"><a href="#典礼" class="headerlink" title="典礼"></a>典礼</h1><p>典礼开始前，亲朋好友就已经就位了。音乐造足了氛围后，主持人先上来了……张老师千呼万唤始出来，出来后一个急转弯踩着音乐的节拍径直往楼上走，步伐和十几年前初见时并无二致。</p><p>典礼过程中印象最深的是新娘说，感谢你能理解我做的事的意义(大意)，这一句话想必击中了在场绝大多数研究生尤其是各位博士的内心。因为每个研究生毕业答辩的时候，最害怕的问题应该就是答辩评委问，你做的工作有什么意义？</p><p>现在想起来，2015 年初我和老妹儿一起写博士论文的时候，和老妹儿互怼了好几次。当时老妹儿就说他家在草原，我不相信，后来一查，果然白城是科尔沁草原的明珠，为此我还专门把老妹的手机铃声调成了凤凰传奇的《我从草原来》。当时老妹儿还说博士论文的参考文献不能低于多少，说他师兄都是这样的，我就下载了他师兄的论文然后一个一个统计，最后把数据甩给他啪啪打脸。我认为自己博士课题的唯一意义，就是让我赶快毕业滚蛋。</p><p>典礼快结束终于发了筷子，虽然是婚宴，但菜品的味道还不错，我连着吃了好几个大虾。吃得正开心时，抬眼一看，其他桌的亲朋好友已经走了不少，看来我们桌应该是消灭得最干净的一桌了。</p><h1 id="返程"><a href="#返程" class="headerlink" title="返程"></a>返程</h1><p>中午典礼结束，回酒店休息，一觉睡到快 3 点，LGD 败者组决赛不敌 Liquid，总决赛也不用看了。老妹儿中午参加完典礼，下午还过来给我们送水果，着实让人感动。带的李子确实甜，不过沙果太酸了，咬了一口就放下了。和高师兄一唱一和，老妹儿又带我们去吃了老金家烧烤，5 点 20 多的火车，吃到了 4 点 55 才出发，到了取票直接检票上车，去长春的路上还拍到了白城的风车(手机相机效果不好，凑合看吧)。</p><img src="/images/2019/2019-08-25-白城风车.jpg" width="600px"/><p>到长春已经是晚上 8 点多了，在蔡爷带领下我们一行四人又到车站附近的饺子馆来了一顿晚餐，俗话说：上车饺子下车面，还吃了东北特色的锅包肉，应该是这次来吃到的最好吃的锅包肉了。</p><p>晚上回京的车次是 Z62 的软卧，四个人一个包厢。这个车非常好，长春始发，8 小时一站直达北京站，软卧包厢四个人一起也不用受熄灯影响，果断开始双升，从长春打到四平打到沈阳北，1 点中才睡，最终 8 比 Q 憾负。车上睡了 5 个小时，睡梦中经过了秦皇岛和唐山，5 点半列车员过来喊起床，又眯了一会儿，再一睁眼已经过建国门，列车很快停在了北京站的站台，草原王子的婚礼之旅也算正式落下了帷幕。</p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;alert alert-info&quot;&gt;&lt;i class=&quot;fa fa-info&quot;&gt;&lt;/i&gt;
恭贺草原王子大婚。
&lt;/div&gt;
    
    </summary>
    
      <category term="生活" scheme="http://tommyjiang.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="婚礼" scheme="http://tommyjiang.github.io/tags/%E5%A9%9A%E7%A4%BC/"/>
    
  </entry>
  
  <entry>
    <title>陈天奇《机器学习科研的十年》读后感</title>
    <link href="http://tommyjiang.github.io/2019/2019-07-19-chen-tianqi-zhihu-post-thought/"/>
    <id>http://tommyjiang.github.io/2019/2019-07-19-chen-tianqi-zhihu-post-thought/</id>
    <published>2019-07-19T07:00:00.000Z</published>
    <updated>2021-04-27T06:17:17.209Z</updated>
    
    <content type="html"><![CDATA[<div class="alert alert-info"><i class="fa fa-info"></i>见贤思齐。</div><a id="more"></a><p>读了陈天奇最新的文章<a href="https://zhuanlan.zhihu.com/p/74249758">《机器学习科研的十年》</a>，写写感想。</p><h1 id="良好的外部环境"><a href="#良好的外部环境" class="headerlink" title="良好的外部环境"></a>良好的外部环境</h1><p>陈天奇在文中分享了他的主要经历：本科上海交大 ACM、实习 MSRA、交换香港、博士 UW、实习 Google、教职 CMU。文中也列出了他的主要合作者，戴文渊(第四范式创始人)、李航(统计学习方法一书的作者、字节跳动人工智能实验室总监)、Carlos、Ian Goodfellow(GAN 发明人、Apple 机器学习总监)，还有其他一些文中没有名字的同学。</p><h1 id="勤勉的个人努力"><a href="#勤勉的个人努力" class="headerlink" title="勤勉的个人努力"></a>勤勉的个人努力</h1><p>陈天奇在文中多次提到了各种想法和尝试的具体情景：</p><blockquote><p>再到时不时在树下踱步想如何加旋转不变的模型的尝试</p><p>我在排队参观西雅图艺术博物馆的 infinity mirror 展览的途中把加速器内存拷贝支持的第一个方案写在了一张星巴克的餐巾纸上</p><p>在去加州的飞机上，我尝试在纸上画出为了优化矩阵乘法可能的循环变换</p></blockquote><p>能在个人生活中穿插这么多努力，可见确实非常喜欢自己所做的事情，还记得之前电网领导问我能给自己打多少分，做到这样绝对超过 100 分了。</p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;alert alert-info&quot;&gt;&lt;i class=&quot;fa fa-info&quot;&gt;&lt;/i&gt;
见贤思齐。
&lt;/div&gt;
    
    </summary>
    
      <category term="工作" scheme="http://tommyjiang.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
      <category term="选择" scheme="http://tommyjiang.github.io/tags/%E9%80%89%E6%8B%A9/"/>
    
  </entry>
  
  <entry>
    <title>CV DL Object Detection Paper 汇总</title>
    <link href="http://tommyjiang.github.io/2019/2019-04-30-CV-DL-OD-papers/"/>
    <id>http://tommyjiang.github.io/2019/2019-04-30-CV-DL-OD-papers/</id>
    <published>2019-04-30T11:00:00.000Z</published>
    <updated>2021-04-27T06:17:17.210Z</updated>
    
    <content type="html"><![CDATA[<div class="alert alert-info"><i class="fa fa-info"></i>CV DL OD 文献引用关系图</div><a id="more"></a><div id="refs" style="width: 100%;height: 1000px;margin: 0 auto"></div><script src="https://cdn.bootcss.com/echarts/4.2.1-rc1/echarts.js"></script><script src="https://cdn.bootcss.com/echarts/4.2.1-rc1/extension/dataTool.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.0/jquery.js"></script><script src="https://cdn.rawgit.com/apache/incubator-echarts/master/theme/vintage.js"></script><script type="text/javascript">    // 查找函数    function findArray(array, feature, all = true) {        for(let index in array){            let cur = array[index];            if(feature instanceof Object){                let allRight = true;                for(let key in feature){                    let value = feature[key];                    if(cur[key] == value && !all) return index;                    if(all && cur[key] != value){                        allRight = false;                        break;                    }                }                if(allRight) return index;            }else{                if(cur == feature){                    return index;                }            }        }        return -1;    }    var myChart = echarts.init(document.getElementById('refs'), 'vintage');    myChart.showLoading();$.get('https://raw.githubusercontent.com/ecomfe/echarts-examples/gh-pages/public/data/asset/data/les-miserables.gexf', function (xml) {    myChart.hideLoading();    // TODO 点击节点跳转到论文 arxiv 链接    // TODO 节点 symbolSize 随年份衰减    // TODO 根据 link 两篇文章年份设定权重    var graph = {        "nodes":[        // TODO Mask-RCNN        // Object Detection        {"id":"R-CNN", "name":"2013-R-CNN", "symbolSize":10, "category":1}, // 1311.2524        {"id":"SPPNet", "name":"2014-SPPNet", "symbolSize":10, "category":1}, // 1406.4729        {"id":"Fast-RCNN", "name":"2015-Fast-RCNN", "symbolSize":10, "category":1}, // 1504.08083        {"id":"Faster-RCNN", "name":"2015-Faster-RCNN", "symbolSize":10, "category":1}, // 1506.01497        {"id":"ResNet", "name":"2015-ResNet", "symbolSize":10, "category":0}, // 1512.03385        {"id":"FPN", "name":"2016-FPN", "symbolSize":10, "category":1}, // 1612.03144        {"id":"Cascade RetinaNet", "name":"2019-Cascade-RetinaNet", "symbolSize":10, "category":2}, // 1907.06881        ],        "links":[        // 2014-SPPNet        {"source":"SPPNet", "target":"R-CNN"}, // Ref 7        // 2015-Fast-RCNN        {"source":"Fast-RCNN", "target":"R-CNN"}, // Ref 9        {"source":"Fast-RCNN", "target":"SPPNet"}, // Ref 11        // 2015-Faster-RCNN        {"source":"Faster-RCNN", "target":"SPPNet"}, // Ref 1        {"source":"Faster-RCNN", "target":"Fast-RCNN"}, // Ref 2        {"source":"Faster-RCNN", "target":"R-CNN"}, // Ref 5        // 2015-ResNet        {"source":"ResNet", "target":"Fast-RCNN"}, // Ref 7        {"source":"ResNet", "target":"R-CNN"}, // Ref 8        // 2016-FPN        {"source":"FPN", "target":"Fast-RCNN"}, // Ref 11        {"source":"FPN", "target":"R-CNN"}, // Ref 12        {"source":"FPN", "target":"SPPNet"}, // Ref 15        // {"source":"FPN", "target":"SSD"}, // Ref 22        {"source":"FPN", "target":"Faster-RCNN"}, // Ref 29        // 2019-Cascade-RetinaNet        // {"source":"Cascade RetinaNet", "target":"DSSD"}, // Ref 8        {"source":"Cascade RetinaNet", "target":"Fast-RCNN"}, // Ref 10        // {"source":"Cascade RetinaNet", "target":"Mask R-CNN"}, // Ref 11        {"source":"Cascade RetinaNet", "target":"ResNet"}, // Ref 12        ]    }    var categories = [{'name': '基础网络'},                      {'name': '两阶段网络'},                      {'name': '单阶段网络'}                     ];    // TODO 根据 link 修改 symbolSize / 根据年份加权    graph.links.forEach(function (link) {        link.id = link.source + "-" + link.target        var cur_link = link.target        var index = findArray(graph.nodes, {id: link.target});        graph.nodes[index]['symbolSize'] += 2        console.log(link)        // console.log(graph.nodes[0]['id'])    });    graph.nodes.forEach(function (node) {        node.itemStyle = null;        node.value = node.symbolSize;        node.label = {            normal: {                show: node.symbolSize > 0            }        };    });    option = {        title: {            text: 'CV refs',            subtext: 'Circular layout',            top: 'bottom',            left: 'right'        },        tooltip: {},        legend: [{            // selectedMode: 'single',            data: categories.map(function (a) {                return a.name;            })        }],        animation: false,        // animationDurationUpdate: 1500,        // animationEasingUpdate: 'quinticInOut',        series : [            {                name: 'CV refs',                type: 'graph',                // layout: 'circular',                layout: 'force',                force: {                    repulsion: 2000,                    gravity: 0.2                },                circular: {                    rotateLabel: true                },                edgeSymbol: [null, 'arrow'],  // 有向图, edgeSymbol 为 arrow                data: graph.nodes,                links: graph.links,                categories: categories,                roam: true,                focusNodeAdjacency: true,                itemStyle: {                    normal: {                        borderColor: '#fff',                        borderWidth: 1,                        shadowColor: 'rgba(0, 0, 0, 0.3)'                    }                },                label: {                    normal: {                        position: 'right',                        formatter: '{b}'                    }                },                lineStyle: {                    normal: {                        color: 'source',                        curveness: 0.3                    }                }            }        ]    };    myChart.setOption(option);}, 'xml');</script>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;alert alert-info&quot;&gt;&lt;i class=&quot;fa fa-info&quot;&gt;&lt;/i&gt;
CV DL OD 文献引用关系图
&lt;/div&gt;
    
    </summary>
    
      <category term="技术" scheme="http://tommyjiang.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CV" scheme="http://tommyjiang.github.io/tags/CV/"/>
    
      <category term="DL" scheme="http://tommyjiang.github.io/tags/DL/"/>
    
      <category term="目标检测" scheme="http://tommyjiang.github.io/tags/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
</feed>
